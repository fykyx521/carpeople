{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"weui-fe",
				"weui-flex__item"
			],
			[
				"te",
				"text-align"
			],
			[
				"data",
				"datafrom"
			],
			[
				"start",
				"startdate"
			],
			[
				"i",
				"i0358"
			],
			[
				"im",
				"imt\timport junit.framework.TestCase;"
			],
			[
				"cu",
				"currentUser"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/F/wechat/carpeople2/carpeople/weapp/page/search/search.wxml",
			"settings":
			{
				"buffer_size": 1211,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/acer/Desktop/新建文本文档.txt",
			"settings":
			{
				"buffer_size": 7395,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "<template>\n\n    <view class=\"weui-cells weui-cells_form\">\n      <view class=\"weui-cells__title\">出行模式</view>\n      <view class=\"weui-cell weui-cell_warn\">\n                <view class=\"weui-cell__hd\"><label class=\"weui-label\">手机号</label></view>\n                <view class=\"weui-cell__bd\">\n                    <input class=\"weui-input\" type=\"number\" pattern=\"[0-9]*\" v-model='tel' placeholder=\"请输入手机号\">\n                </view>\n            </view>\n      <view class=\"weui-cells weui-cells_radio\"> \n        <label class=\"weui-cell weui-check__label\" for=\"x11\"> \n          <view class=\"weui-cell__bd\"> \n            <p>车找人</p> \n          </view>\n          <view class=\"weui-cell__ft\"> \n            <input type=\"radio\" class=\"weui-check\" name=\"radio1\" id=\"x11\" value=\"1\" v-model=\"cptype\">\n            <span class=\"weui-icon-checked\"></span>\n          </view>\n        </label>\n        <label class=\"weui-cell weui-check__label\" for=\"x12\">\n\n          <view class=\"weui-cell__bd\">\n            <p>人找车</p>\n          </view>\n          <view class=\"weui-cell__ft\">\n            <input type=\"radio\" name=\"radio1\" class=\"weui-check\" id=\"x12\" value=\"0\" v-model=\"cptype\">\n            <span class=\"weui-icon-checked\"></span>\n          </view>\n        </label>\n        \n      </view>\n\n      <view class=\"weui-cells__title\">选择出发地和目的地</view>\n      <view class=\"weui-cells\">\n      \n        <view class=\"weui-cell weui-cell_select weui-cell_select-after\">\n        <view class=\"weui-cell__hd\">\n          <label for=\"\" class=\"weui-label\">出发地</label>\n        </view>\n        <view class=\"weui-cell__bd\">\n          <select class=\"weui-select\" name=\"select2\" v-model=\"from\">\n            <option value=\"141124\">临县</option>\n            <option value=\"140100\">太原</option>\n            <option value=\"141102\">离石</option>\n          </select>\n        </view>\n      </view>\n\n\n      <view class=\"weui-cell weui-cell_select weui-cell_select-after\">\n        <view class=\"weui-cell__hd\">\n          <label for=\"\" class=\"weui-label\">目的地</label>\n        </view>\n        <view class=\"weui-cell__bd\">\n          <select class=\"weui-select\" name=\"select3\" v-model=\"to\">\n            <option value=\"141124\">临县</option>\n            <option value=\"140100\">太原</option>\n            <option value=\"141102\">离石</option>\n          </select>\n        </view>\n      </view>\n\n      </view>\n      \n      \n      \n      <view class=\"weui-cells__title\">选择出发日期和出发时间</view>\n      <view class=\"weui-cell weui-cell_select weui-cell_select-after\">\n        <view class=\"weui-cell__hd\">\n          <label for=\"\" class=\"weui-label\">出发日期</label>\n        </view>\n        <view class=\"weui-cell__bd\">\n          <select class=\"weui-select\" name=\"select4\" v-model=\"startdate\">\n            <option v-for=\"item,key in startdateoption\" :value=\"item.value\">{{item.key}}</option>\n            \n          </select>\n        </view>\n      </view>\n      <view class=\"weui-cell weui-cell_select weui-cell_select-after\">\n        <view class=\"weui-cell__hd\">\n          <label for=\"\" class=\"weui-label\">出发时间</label>\n        </view>\n        <view class=\"weui-cell__bd\">\n          <select class=\"weui-select\" name=\"select5\" v-model=\"starttime\">\n            <option v-for=\"item in starttimeoption\" :value=\"item\">{{item}}点</option>\n          </select>\n        </view>\n      </view>\n\n      <view class=\"weui-cell weui-cell_select weui-cell_select-after\">\n        <view class=\"weui-cell__hd\">\n          <label for=\"\" class=\"weui-label\">人数</label>\n        </view>\n        <view class=\"weui-cell__bd\">\n          <select class=\"weui-select\" name=\"select6\" v-model=\"peoplenum\">\n            <option value=\"1\">1</option>\n            <option value=\"2\">2</option>\n            <option value=\"3\">3</option>\n            <option value=\"4\">4</option>\n          </select>\n        </view>\n      </view>\n      <!-- <view class=\"weui-cell weui-cell_select weui-cell_select-after\">\n        <view class=\"weui-cell__hd\">\n          <label for=\"\" class=\"weui-label\">价格(每人)</label>\n        </view>\n        <view class=\"weui-cell__bd\">\n          <select class=\"weui-select\" name=\"select7\" v-model=\"unitprice\">\n            <option value=\"0\">电话沟通</option>\n            <option value=\"30\">30</option>\n            <option value=\"40\">40</option>\n            <option value=\"50\">50</option>\n            <option value=\"60\">60</option>\n            <option value=\"70\">70</option>\n          </select>\n        </view>\n      </view> -->\n      \n      <button class=\"weui-btn weui-btn_primary\" @click='publish'>确认发布</button>\n    </view>\n  </view>  \n</template>\n\n<script>\n  // import moment from 'moment';\n  export default {\n    name:'publish',\n    data ()\n    {\n      return {\n        cptype:0,\n        from:141124,\n        to:140100,\n        tel:'',\n        peoplenum:1,\n        unitprice:0,\n        startdate:1,\n        starttime:12,\n      }\n    },\n    computed:{\n       startdateoption()\n       {\n         \n           let hour=new Date().getHours();\n          if(hour>=19)\n          {\n              this.startdate=2;\n              return [{key:\"明天\",value:2},{key:\"后天\",value:3}];\n          }\n          this.startdate=1;\n          return  [{key:\"今天\",value:1},{key:'明天',value:2},{key:'后天',value:3}];\n       },\n       starttimeoption ()\n       {\n         let hour=new Date().getHours();\n         \n         let starthour=hour;\n         if(this.startdate>1)\n         {\n           starthour=5; \n         }\n         console.log(hour);\n         this.starttime=starthour;\n         let end=19;\n         let options=[];\n         for(var i=starthour;i<=end;i++)\n         {\n           options.push(i);\n         }\n         return options;\n       }\n    },\n    methods:{\n      back()\n      {\n        this.$router.push({name:'searchview'});\n      },\n      valid ()\n      {\n        if(this.tel=='')\n                {\n                    this.topTips('电话号码不能为空',1500);\n                    return false;\n                }\n                let reg=/^1[3|4|5|8|7][0-9]\\d{4,8}$/;\n                if(!reg.test(this.tel.toString()))\n                {\n                    this.topTips('电话号码格式不正确',1500);\n                    return false;\n                }\n                return true;\n      },\n      topTips (msg)\n      {\n         alert(msg);\n      },\n      publish ()\n      {\n        if(!this.valid())\n        {\n          return;\n        }\n        var currentUser = Bmob.User.current();\n        var CarPeople = Bmob.Object.extend(\"icp\");\n          var cp = new CarPeople();\n          cp.set(\"cptype\",Number(this.cptype));\n          cp.set('from',Number(this.from));\n          cp.set('to',Number(this.to));\n          let startdate=new Date();\n          startdate.setMinutes(0);\n          startdate.setSeconds(0);\n          startdate.setHours(this.starttime);\n          console.log(startdate);\n          // let startdate=moment().hour(this.starttime).minute(0).second(0).toDate();\n          cp.set('startdate',startdate);\n          cp.set('starttime',startdate.getTime());\n          cp.set('peoplenum',Number(this.peoplenum));\n          cp.set('unitprice',Number(this.unitprice));\n          // if(currentUser){\n          //  cp.set('parent',currentUser);\n          cp.set('phone',Number(this.tel));\n          // }\n          cp.save().then(()=>{\n            this.$router.push({name:'searchview',params:{from:this.from,to:this.to}})\n            console.log('添加成功');\n          },error=>{\n            console.log(error);\n          })\n      }\n    }\n  }\n</script>\n<style scoped>\n  .weui-cells{\n    margin-top: 0px;\n  }\n</style>\n\n\n\n",
			"settings":
			{
				"buffer_size": 7458,
				"line_ending": "Windows",
				"name": "<template>"
			}
		},
		{
			"file": "/F/wechat/carpeople2/carpeople/weapp/example/input/input.wxml",
			"settings":
			{
				"buffer_size": 7608,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/F/wechat/carpeople2/carpeople/weapp/page/login/login.wxml",
			"settings":
			{
				"buffer_size": 1033,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "/*!\n * Bmob WeChat applet SDK\n * http://www.bmob.cn\n * Copyright Bmob, Inc.\n * The Bmob WeChat applet SDK is freely distributable under the MIT license.\n * (c) 2016-2050 Magic\n */\n\n(function (root) {\n    var _ = require('underscore.js');\n    var Bmob = {};\n    Bmob.VERSION = \"js0.0.1\";\n    Bmob._ = _;\n\n    var EmptyConstructor = function () { };\n\n    if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = Bmob;\n        }\n        exports.Bmob = Bmob;\n    } else {\n        root.Bmob = Bmob;\n    }\n\n    // Helper function to correctly set up the prototype chain, for subclasses.\n    // Similar to `goog.inherits`, but uses a hash of prototype properties and\n    // class properties to be extended.\n    var inherits = function (parent, protoProps, staticProps) {\n        var child;\n\n        // The constructor function for the new subclass is either defined by you\n        // (the \"constructor\" property in your `extend` definition), or defaulted\n        // by us to simply call the parent's constructor.\n        if (protoProps && protoProps.hasOwnProperty('constructor')) {\n            child = protoProps.constructor;\n        } else {\n            /** @ignore */\n            child = function () {\n                parent.apply(this, arguments);\n            };\n        }\n\n        // Inherit class (static) properties from parent.\n        Bmob._.extend(child, parent);\n\n        // Set the prototype chain to inherit from `parent`, without calling\n        // `parent`'s constructor function.\n        EmptyConstructor.prototype = parent.prototype;\n        child.prototype = new EmptyConstructor();\n\n        // Add prototype properties (instance properties) to the subclass,\n        // if supplied.\n        if (protoProps) {\n            Bmob._.extend(child.prototype, protoProps);\n        }\n\n        // Add static properties to the constructor function, if supplied.\n        if (staticProps) {\n            Bmob._.extend(child, staticProps);\n        }\n\n        // Correctly set child's `prototype.constructor`.\n        child.prototype.constructor = child;\n\n        // Set a convenience property in case the parent's prototype is\n        // needed later.\n        child.__super__ = parent.prototype;\n\n        return child;\n    };\n\n    // Set the server for Bmob to talk to.\n    Bmob.serverURL = \"https://api.bmob.cn\";\n    Bmob.fileURL = \"http://file.bmob.cn\";\n\n    // Check whether we are running in Node.js.\n    if (typeof (process) !== \"undefined\" && process.versions && process.versions.node) {\n        Bmob._isNode = true;\n    }\n\n    /**\n   * 初始化时需要调用这个函数。可以从bmob中获取所需的key\n   * \n   * @param {String} applicationId 你的 Application ID.\n   * @param {String} applicationKey 你的 restful api Key.\n   * @param {String} masterKey (optional) 你的 bmob Master Key. \n   */\n    Bmob.initialize = function (applicationId, applicationKey, masterKey) {\n        Bmob._initialize(applicationId, applicationKey, masterKey);\n    };\n\n    /**\n   * Call this method first to set up authentication tokens for Bmob.\n   * This method is for Bmob's own private use.\n   * @param {String} applicationId Your Bmob Application ID.\n   * @param {String} applicationKey Your Bmob Application Key\n\n   */\n    Bmob._initialize = function (applicationId, applicationKey, masterKey) {\n        Bmob.applicationId = applicationId;\n        Bmob.applicationKey = applicationKey;\n        Bmob.masterKey = masterKey;\n        Bmob._useMasterKey = true;\n    };\n\n    if (Bmob._isNode) {\n        Bmob.initialize = Bmob._initialize;\n\n    }\n\n    /**\n   * Returns prefix for localStorage keys used by this instance of Bmob.\n   * @param {String} path The relative suffix to append to it.\n   *     null or undefined is treated as the empty string.\n   * @return {String} The full key name.\n   */\n    Bmob._getBmobPath = function (path) {\n        if (!Bmob.applicationId) {\n            throw \"You need to call Bmob.initialize before using Bmob.\";\n        }\n        if (!path) {\n            path = \"\";\n        }\n        if (!Bmob._.isString(path)) {\n            throw \"Tried to get a localStorage path that wasn't a String.\";\n        }\n        if (path[0] === \"/\") {\n            path = path.substring(1);\n        }\n        return \"Bmob/\" + Bmob.applicationId + \"/\" + path;\n    };\n\n    /**\n   * Returns prefix for localStorage keys used by this instance of Bmob.\n   * @param {String} path The relative suffix to append to it.\n   *     null or undefined is treated as the empty string.\n   * @return {String} The full key name.\n   */\n    Bmob._getBmobPath = function (path) {\n        if (!Bmob.applicationId) {\n            throw \"You need to call Bmob.initialize before using Bmob.\";\n        }\n        if (!path) {\n            path = \"\";\n        }\n        if (!Bmob._.isString(path)) {\n            throw \"Tried to get a localStorage path that wasn't a String.\";\n        }\n        if (path[0] === \"/\") {\n            path = path.substring(1);\n        }\n        return \"Bmob/\" + Bmob.applicationId + \"/\" + path;\n    };\n\n    /**\n   * Returns the unique string for this app on this machine.\n   * Gets reset when localStorage is cleared.\n   */\n    Bmob._installationId = null;\n    Bmob._getInstallationId = function () {\n        // See if it's cached in RAM.\n        if (Bmob._installationId) {\n            return Bmob._installationId;\n        }\n\n        // Try to get it from localStorage.\n        var path = Bmob._getBmobPath(\"installationId\");\n        // Bmob._installationId = Bmob.localStorage.getItem(path);\n        wx.getStorage({\n            key: 'key',\n            success: function (res) {\n                Bmob._installationId = res.data;\n                console.log(res.data)\n            }\n        })\n\n        if (!Bmob._installationId || Bmob._installationId === \"\") {\n            // It wasn't in localStorage, so create a new one.\n            var hexOctet = function () {\n                return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n            };\n            Bmob._installationId = (hexOctet() + hexOctet() + \"-\" + hexOctet() + \"-\" + hexOctet() + \"-\" + hexOctet() + \"-\" + hexOctet() + hexOctet() + hexOctet());\n\n            wx.setStorage({\n                key: path,\n                data: Bmob._installationId\n            })\n\n        }\n\n        return Bmob._installationId;\n    };\n\n    Bmob._parseDate = function (iso8601) {\n        var regexp = new RegExp(\"^([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2})\" + \"T\" + \"([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})\" + \"(.([0-9]+))?\" + \"Z$\");\n        var match = regexp.exec(iso8601);\n        if (!match) {\n            return null;\n        }\n\n        var year = match[1] || 0;\n        var month = (match[2] || 1) - 1;\n        var day = match[3] || 0;\n        var hour = match[4] || 0;\n        var minute = match[5] || 0;\n        var second = match[6] || 0;\n        var milli = match[8] || 0;\n\n        return new Date(Date.UTC(year, month, day, hour, minute, second, milli));\n    };\n\n    Bmob._ajax = function (method, url, data, success, error) {\n        var options = {\n            success: success,\n            error: error\n        };\n        var promise = new Bmob.Promise();\n\n        var dataObject = JSON.parse(data);\n\n        var error;\n        wx.showNavigationBarLoading()\n        if (dataObject.category == \"wechatApp\") {\n\n            wx.uploadFile({\n                url: url,\n                filePath: dataObject.base64,\n                name: 'file',\n                header: {\n                    \"X-Bmob-SDK-Type\": \"wechatApp\"\n                },\n                formData: dataObject,\n                success: function (res) {\n                    console.log(res);\n                    var data = JSON.parse(res.data);\n                    promise.resolve(data, res.statusCode, res);\n                    wx.hideNavigationBarLoading()\n                },\n                fail: function (e) {\n                    console.log(e);\n                    promise.reject(e);\n                    wx.hideNavigationBarLoading()\n                }\n            });\n        } else {\n           \n            wx.request({\n                method: method,\n                url: url,\n                data: data,\n                header: {\n                    'content-type': 'text/plain'\n                },\n                success: function (res) {\n                    if (res.data && res.data.code) {\n                        promise.reject(res);\n                    } else if (res.statusCode != 200) {\n\n                        promise.reject(res);\n                    } else {\n                        promise.resolve(res.data, res.statusCode, res);\n                    }\n                    wx.hideNavigationBarLoading()\n                },\n                fail: function (e) {\n                    promise.reject(e);\n                    wx.hideNavigationBarLoading()\n                }\n            });\n        }\n\n        if (error) {\n            return Bmob.Promise.error(error);\n        }\n\n        return promise._thenRunCallbacks(options);\n    }\n\n    // A self-propagating extend function.\n    Bmob._extend = function (protoProps, classProps) {\n        var child = inherits(this, protoProps, classProps);\n        child.extend = this.extend;\n        return child;\n    };\n\n    /**\n   * route is classes, users, login, etc.\n   * objectId is null if there is no associated objectId.\n   * method is the http method for the REST API.\n   * dataObject is the payload as an object, or null if there is none.\n   * @ignore\n   */\n    Bmob._request = function (route, className, objectId, method, dataObject) {\n        if (!Bmob.applicationId) {\n            throw \"You must specify your applicationId using Bmob.initialize\";\n        }\n\n        if (!Bmob.applicationKey && !Bmob.masterKey) {\n            throw \"You must specify a key using Bmob.initialize\";\n        }\n\n        var url = Bmob.serverURL;\n        if (url.charAt(url.length - 1) !== \"/\") {\n            url += \"/\";\n        }\n        if (route.indexOf(\"2/\") < 0) { //如果是使用了2版接口，则不需要加上路由\n            url += \"1/\" + route;\n        } else {\n            url += route;\n        }\n        if (className) {\n            url += \"/\" + className;\n        }\n        if (objectId) {\n            url += \"/\" + objectId;\n        }\n        if ((route === 'users' || route === 'classes') && method === 'PUT' && dataObject._fetchWhenSave) {\n            delete dataObject._fetchWhenSave;\n            url += '?new=true';\n        }\n\n        dataObject = Bmob._.clone(dataObject || {});\n        if (method !== \"POST\") {\n            dataObject._Method = method;\n            method = \"POST\";\n        }\n\n        dataObject._ApplicationId = Bmob.applicationId;\n        dataObject._RestKey = Bmob.applicationKey;\n        if (Bmob._useMasterKey && Bmob.masterKey != undefined) {\n            dataObject._MasterKey = Bmob.masterKey;\n        }\n\n        dataObject._ClientVersion = Bmob.VERSION;\n        dataObject._InstallationId = Bmob._getInstallationId();\n\n        // Pass the session token on every request.\n        var currentUser = Bmob.User.current();\n        if (currentUser && currentUser._sessionToken) {\n            dataObject._SessionToken = currentUser._sessionToken;\n        }\n        var data = JSON.stringify(dataObject);\n\n        return Bmob._ajax(method, url, data).then(null,\n            function (response) {\n                // Transform the error into an instance of Bmob.Error by trying to parse\n                // the error string as JSON.          \n                var error;\n                try {\n                    if (response.data.code) {\n                        error = new Bmob.Error(response.data.code, response.data.error);\n                    }\n                } catch (e) {\n                    // If we fail to parse the error text, that's okay.\n                }\n                error = error || new Bmob.Error(- 1, response.data);\n                // By explicitly returning a rejected Promise, this will work with\n                // either jQuery or Promises/A semantics.\n                return Bmob.Promise.error(error);\n            });\n    };\n\n    // Helper function to get a value from a Backbone object as a property\n    // or as a function.\n    Bmob._getValue = function (object, prop) {\n        if (!(object && object[prop])) {\n            return null;\n        }\n        return Bmob._.isFunction(object[prop]) ? object[prop]() : object[prop];\n    };\n\n    /**\n   * Converts a value in a Bmob Object into the appropriate representation.\n   * This is the JS equivalent of Java's Bmob.maybeReferenceAndEncode(Object)\n   * if seenObjects is falsey. Otherwise any Bmob.Objects not in\n   * seenObjects will be fully embedded rather than encoded\n   * as a pointer.  This array will be used to prevent going into an infinite\n   * loop because we have circular references.  If <seenObjects>\n   * is set, then none of the Bmob Objects that are serialized can be dirty.\n   */\n    Bmob._encode = function (value, seenObjects, disallowObjects) {\n        var _ = Bmob._;\n        if (value instanceof Bmob.Object) {\n            if (disallowObjects) {\n                throw \"Bmob.Objects not allowed here\";\n            }\n            if (!seenObjects || _.include(seenObjects, value) || !value._hasData) {\n                return value._toPointer();\n            }\n            if (!value.dirty()) {\n                seenObjects = seenObjects.concat(value);\n                return Bmob._encode(value._toFullJSON(seenObjects), seenObjects, disallowObjects);\n            }\n            throw \"Tried to save an object with a pointer to a new, unsaved object.\";\n        }\n        if (value instanceof Bmob.ACL) {\n            return value.toJSON();\n        }\n        if (_.isDate(value)) {\n            return {\n                \"__type\": \"Date\",\n                \"iso\": value.toJSON()\n            };\n        }\n        if (value instanceof Bmob.GeoPoint) {\n            return value.toJSON();\n        }\n        if (_.isArray(value)) {\n            return _.map(value,\n                function (x) {\n                    return Bmob._encode(x, seenObjects, disallowObjects);\n                });\n        }\n        if (_.isRegExp(value)) {\n            return value.source;\n        }\n        if (value instanceof Bmob.Relation) {\n            return value.toJSON();\n        }\n        if (value instanceof Bmob.Op) {\n            return value.toJSON();\n        }\n\n        if (value instanceof Bmob.File) {\n            if (!value.url()) {\n                throw \"Tried to save an object containing an unsaved file.\";\n            }\n            return {\n                \"__type\": \"File\",\n                \"cdn\": value.cdn(),\n                \"filename\": value.name(),\n                \"url\": value.url()\n            };\n        }\n        if (_.isObject(value)) {\n            var output = {};\n            Bmob._objectEach(value,\n                function (v, k) {\n                    output[k] = Bmob._encode(v, seenObjects, disallowObjects);\n                });\n            return output;\n        }\n        return value;\n    };\n\n    /**\n   * The inverse function of Bmob._encode.\n   * TODO: make decode not mutate value.\n   */\n    Bmob._decode = function (key, value) {\n        var _ = Bmob._;\n        if (!_.isObject(value)) {\n            return value;\n        }\n        if (_.isArray(value)) {\n            Bmob._arrayEach(value,\n                function (v, k) {\n                    value[k] = Bmob._decode(k, v);\n                });\n            return value;\n        }\n        if (value instanceof Bmob.Object) {\n            return value;\n        }\n        if (value instanceof Bmob.File) {\n            return value;\n        }\n        if (value instanceof Bmob.Op) {\n            return value;\n        }\n        if (value.__op) {\n            return Bmob.Op._decode(value);\n        }\n        if (value.__type === \"Pointer\") {\n            var className = value.className;\n            var pointer = Bmob.Object._create(className);\n            if (value.createdAt) {\n                delete value.__type;\n                delete value.className;\n                pointer._finishFetch(value, true);\n            } else {\n                pointer._finishFetch({\n                    objectId: value.objectId\n                },\n                    false);\n            }\n            return pointer;\n        }\n        if (value.__type === \"Object\") {\n            // It's an Object included in a query result.\n            var className = value.className;\n            delete value.__type;\n            delete value.className;\n            var object = Bmob.Object._create(className);\n            object._finishFetch(value, true);\n            return object;\n        }\n        if (value.__type === \"Date\") {\n            return value.iso;\n        }\n        if (value.__type === \"GeoPoint\") {\n            return new Bmob.GeoPoint({\n                latitude: value.latitude,\n                longitude: value.longitude\n            });\n        }\n        if (key === \"ACL\") {\n            if (value instanceof Bmob.ACL) {\n                return value;\n            }\n            return new Bmob.ACL(value);\n        }\n        if (value.__type === \"Relation\") {\n            var relation = new Bmob.Relation(null, key);\n            relation.targetClassName = value.className;\n            return relation;\n        }\n        if (value.__type === \"File\") {\n            // var file = new Bmob.File(value.name);\n            // file._metaData = value.metaData || {};\n            // file._url = value.url;\n            // file.id = value.objectId;\n            if (value.url != undefined && value.url != null) {\n\n                if (value.url.indexOf(\"http\") >= 0) {\n                    var file = {\n                        \"_name\": value.filename,\n                        \"_url\": value.url,\n                        \"_group\": value.group\n                    };\n                } else {\n                    var file = {\n                        \"_name\": value.filename,\n                        \"_url\": Bmob.fileURL + \"/\" + value.url,\n                        \"_group\": value.group\n                    };\n                }\n            } else { //用cdn上传的文件\n                var file = {\n                    \"_name\": value.filename,\n                    \"_url\": value.url,\n                    \"_group\": value.group\n                };\n            }\n\n            return file;\n        }\n        Bmob._objectEach(value,\n            function (v, k) {\n                value[k] = Bmob._decode(k, v);\n            });\n        return value;\n    };\n\n    Bmob._arrayEach = Bmob._.each;\n\n    /**\n   * Does a deep traversal of every item in object, calling func on every one.\n   * @param {Object} object The object or array to traverse deeply.\n   * @param {Function} func The function to call for every item. It will\n   *     be passed the item as an argument. If it returns a truthy value, that\n   *     value will replace the item in its parent container.\n   * @returns {} the result of calling func on the top-level object itself.\n   */\n    Bmob._traverse = function (object, func, seen) {\n        if (object instanceof Bmob.Object) {\n            seen = seen || [];\n            if (Bmob._.indexOf(seen, object) >= 0) {\n                // We've already visited this object in this call.\n                return;\n            }\n            seen.push(object);\n            Bmob._traverse(object.attributes, func, seen);\n            return func(object);\n        }\n        if (object instanceof Bmob.Relation || object instanceof Bmob.File) {\n            // Nothing needs to be done, but we don't want to recurse into the\n            // object's parent infinitely, so we catch this case.\n            return func(object);\n        }\n        if (Bmob._.isArray(object)) {\n            Bmob._.each(object,\n                function (child, index) {\n                    var newChild = Bmob._traverse(child, func, seen);\n                    if (newChild) {\n                        object[index] = newChild;\n                    }\n                });\n            return func(object);\n        }\n        if (Bmob._.isObject(object)) {\n            Bmob._each(object,\n                function (child, key) {\n                    var newChild = Bmob._traverse(child, func, seen);\n                    if (newChild) {\n                        object[key] = newChild;\n                    }\n                });\n            return func(object);\n        }\n        return func(object);\n    };\n\n    /**\n   * This is like _.each, except:\n   * * it doesn't work for so-called array-like objects,\n   * * it does work for dictionaries with a \"length\" attribute.\n   */\n    Bmob._objectEach = Bmob._each = function (obj, callback) {\n        var _ = Bmob._;\n        if (_.isObject(obj)) {\n            _.each(_.keys(obj),\n                function (key) {\n                    callback(obj[key], key);\n                });\n        } else {\n            _.each(obj, callback);\n        }\n    };\n\n    // Helper function to check null or undefined.\n    Bmob._isNullOrUndefined = function (x) {\n        return Bmob._.isNull(x) || Bmob._.isUndefined(x);\n    };\n\n    /**\n   * Constructs a new Bmob.Error object with the given code and message.\n   * @param {Number} code An error code constant from <code>Bmob.Error</code>.\n   * @param {String} message A detailed description of the error.\n   *\n   * <p>Class used for all objects passed to error callbacks.</p>\n   */\n    Bmob.Error = function (code, message) {\n        this.code = code;\n        this.message = message;\n    };\n\n    _.extend(Bmob.Error,\n        /** @lends Bmob.Error */\n        {\n\n            /**\n         * Error code indicating some error other than those enumerated here.\n         * @constant\n         */\n            OTHER_CAUSE: -1,\n\n            /**\n         * Error code indicating the specified object doesn't exist.\n         * @constant\n         */\n            OBJECT_NOT_FOUND: 101,\n\n            /**\n         * Error code indicating you tried to query with a datatype that doesn't\n         * support it, like exact matching an array or object.\n         * @constant\n         */\n            INVALID_QUERY: 102,\n\n            /**\n         * Error code indicating a missing or invalid classname. Classnames are\n         * case-sensitive. They must start with a letter, and a-zA-Z0-9_ are the\n         * only valid characters.\n         * @constant\n         */\n            INVALID_CLASS_NAME: 103,\n\n            /**\n         * Error code relation className  not exists\n         * @constant\n         */\n            RELATIONDOCNOTEXISTS: 104,\n\n            /**\n         * Error code invalid field name\n         * @constant\n         */\n            INVALID_KEY_NAME: 105,\n\n            /**\n         * Error code indicating a malformed pointer. You should not see this unless\n         * you have been mucking about changing internal Bmob code.\n         * @constant\n         */\n            INVALID_POINTER: 106,\n\n            /**\n         * Error code indicating that badly formed JSON was received upstream. This\n         * either indicates you have done something unusual with modifying how\n         * things encode to JSON, or the network is failing badly.\n         * @constant\n         */\n            INVALID_JSON: 107,\n\n            /**\n         * Error code username and password required\n         * @constant\n         */\n            USERNAME_PASSWORD_REQUIRED: 108,\n\n            /**\n         * Error code indicating that a field was set to an inconsistent type.\n         * @constant\n         */\n            INCORRECT_TYPE: 111,\n\n            /**\n         * Error code requests must be an array\n         * @constant\n         */\n            REQUEST_MUST_ARRAY: 112,\n\n            /**\n         * Error code requests must be LIKE OBJECT\n         * @constant\n         */\n            REQUEST_MUST_OBJECT: 113,\n\n            /**\n         * Error code indicating that the object is too large.\n         * @constant\n         */\n            OBJECT_TOO_LARGE: 114,\n\n            /**\n         * Error code geo error\n         * @constant\n         */\n            GEO_ERROR: 117,\n\n            /**\n         * Error code Email verify should be opened in your app setup page of bmob\n         * @constant\n         */\n            EMAIL_VERIFY_MUST_OPEN: 120,\n\n            /**\n         * Error code indicating the result was not found in the cache.\n         * @constant\n         */\n            CACHE_MISS: 120,\n\n            /**\n         * Error code Invalid device token\n         * @constant\n         */\n            INVALID_DEVICE_TOKEN: 131,\n\n            /**\n         * Error code Invalid installation ID\n         * @constant\n         */\n            INVALID_INSTALLID: 132,\n\n            /**\n         * Error code Invalid device type\n         * @constant\n         */\n            INVALID_DEVICE_TYPE: 133,\n\n            /**\n         * Error code device token EXIST\n         * @constant\n         */\n            DEVICE_TOKEN_EXIST: 134,\n\n            /**\n         * Error code indicating that the email address was invalid.\n         * @constant\n         */\n            INSTALLID_EXIST: 135,\n\n            /**\n         * Error code DEVICE_TOKEN_NOT_FOR_ANDROID\n         * @constant\n         */\n            DEVICE_TOKEN_NOT_FOR_ANDROID: 136,\n\n            /**\n         * Error code indicating a missing content length.\n         * @constant\n         */\n            INVALID_INSTALL_OPERATE: 137,\n\n            /**\n         * Error code READ_ONLY\n         * @constant\n         */\n            READ_ONLY: 138,\n\n            /**\n         * Error code Role names must be restricted to alphanumeric characters, dashes(-), underscores(_), and spaces\n         * @constant\n         */\n            INVALID_ROLE_NAME: 139,\n\n            /**\n         * Error code MISS_PUSH_DATA\n         * @constant\n         */\n            MISS_PUSH_DATA: 141,\n\n            /**\n         * Error code INVALID_PUSH_TIME\n         * @constant\n         */\n            INVALID_PUSH_TIME: 142,\n\n            /**\n         * Error code INVALID_PUSH_EXPIRE\n         * @constant\n         */\n            INVALID_PUSH_EXPIRE: 143,\n\n            /**\n         * Error code PUSHTIME cannot before now\n         * @constant\n         */\n            PUSH_TIME_MUST_BEFORE_NOW: 144,\n\n            /**\n         * Error code file size error\n         * @constant\n         */\n            FILE_SIZE_ERROR: 145,\n\n            /**\n         * Error code file name error\n         * @constant\n         */\n            FILE_NAME_ERROR: 146,\n            FILE_NAME_ERROR: 147,\n\n            /**\n         * Error code file len error\n         * @constant\n         */\n            FILE_LEN_ERROR: 148,\n\n            /**\n         * Error code file delete error\n         * @constant\n         */\n            FILE_UPLOAD_ERROR: 150,\n\n            /**\n         * Error code indicating an unsaved file.\n         * @constant\n         */\n            FILE_DELETE_ERROR: 151,\n\n            /**\n         * Error code image error\n         */\n            IMAGE_ERROR: 160,\n\n            /**\n         * Error code image mode error\n         * @constant\n         */\n            IMAGE_MODE_ERROR: 161,\n\n            /**\n         * Error code image width error\n         * @constant\n         */\n            IMAGE_WIDTH_ERROR: 162,\n\n            /**\n         * Error code image height error\n         * @constant\n         */\n            IMAGE_HEIGHT_ERROR: 163,\n\n            /**\n         * Error code image longEdge error\n         * @constant\n         */\n            IMAGE_LONGEDGE_ERROR: 164,\n\n            /**\n         * Error code image shortgEdge error\n         * @constant\n         */\n            IMAGE_SHORTEDGE_ERROR: 165,\n\n            /**\n         * Error code missing\n         * @constant\n         */\n            USER_MISSING: 201,\n\n            /**\n         * Error code username '%s' already taken\n         * not be altered.\n         * @constant\n         */\n            USER_NAME_TOKEN: 202,\n\n            /**\n         * Error code EMAIL already taken\n         * @constant\n         */\n            EMAIL_EXIST: 203,\n\n            /**\n         * Error code you must provide an email\n         * @constant\n         */\n            NO_EMAIL: 204,\n\n            /**\n         * Error code no user found with email\n         * @constant\n         */\n            NOT_FOUND_EMAIL: 205,\n\n            /**\n         * Error code sessionToken Erro\n         * @constant\n         */\n            SESSIONTOKEN_ERROR: 206,\n\n            /**\n         * Error code valid error\n         * @constant\n         */\n            VALID_ERROR: 301\n        });\n\n    /**\n   *\n   * <p>Bmob.Events 是 fork of Backbone's Events module</p>\n   *\n   * <p>A module that can be mixed in to any object in order to provide\n   * it with custom events. You may bind callback functions to an event\n   * with `on`, or remove these functions with `off`.\n   * Triggering an event fires all callbacks in the order that `on` was\n   * called.\n   *\n   * <pre>\n   *     var object = {};\n   *     _.extend(object, Bmob.Events);\n   *     object.on('expand', function(){ alert('expanded'); });\n   *     object.trigger('expand');</pre></p>\n   *\n   * <p>For more information, see the\n   * <a href=\"http://documentcloud.github.com/backbone/#Events\">Backbone\n   * documentation</a>.</p>\n   */\n    Bmob.Events = {\n        /**\n     * Bind one or more space separated events, `events`, to a `callback`\n     * function. Passing `\"all\"` will bind the callback to all events fired.\n     */\n        on: function (events, callback, context) {\n\n            var calls, event, node, tail, list;\n            if (!callback) {\n                return this;\n            }\n            events = events.split(eventSplitter);\n            calls = this._callbacks || (this._callbacks = {});\n\n            // Create an immutable callback list, allowing traversal during\n            // modification.  The tail is an empty object that will always be used\n            // as the next node.\n            event = events.shift();\n            while (event) {\n                list = calls[event];\n                node = list ? list.tail : {};\n                node.next = tail = {};\n                node.context = context;\n                node.callback = callback;\n                calls[event] = {\n                    tail: tail,\n                    next: list ? list.next : node\n                };\n                event = events.shift();\n            }\n\n            return this;\n        },\n\n        /**\n     * Remove one or many callbacks. If `context` is null, removes all callbacks\n     * with that function. If `callback` is null, removes all callbacks for the\n     * event. If `events` is null, removes all bound callbacks for all events.\n     */\n        off: function (events, callback, context) {\n            var event, calls, node, tail, cb, ctx;\n\n            // No events, or removing *all* events.\n            if (!(calls = this._callbacks)) {\n                return;\n            }\n            if (!(events || callback || context)) {\n                delete this._callbacks;\n                return this;\n            }\n\n            // Loop through the listed events and contexts, splicing them out of the\n            // linked list of callbacks if appropriate.\n            events = events ? events.split(eventSplitter) : _.keys(calls);\n            event = events.shift();\n            while (event) {\n                node = calls[event];\n                delete calls[event];\n                if (!node || !(callback || context)) {\n                    continue;\n                }\n                // Create a new list, omitting the indicated callbacks.\n                tail = node.tail;\n                node = node.next;\n                while (node !== tail) {\n                    cb = node.callback;\n                    ctx = node.context;\n                    if ((callback && cb !== callback) || (context && ctx !== context)) {\n                        this.on(event, cb, ctx);\n                    }\n                    node = node.next;\n                }\n                event = events.shift();\n            }\n\n            return this;\n        },\n\n        /**\n     * Trigger one or many events, firing all bound callbacks. Callbacks are\n     * passed the same arguments as `trigger` is, apart from the event name\n     * (unless you're listening on `\"all\"`, which will cause your callback to\n     * receive the true name of the event as the first argument).\n     */\n        trigger: function (events) {\n            var event, node, calls, tail, args, all, rest;\n            if (!(calls = this._callbacks)) {\n                return this;\n            }\n            all = calls.all;\n            events = events.split(eventSplitter);\n            rest = slice.call(arguments, 1);\n\n            // For each event, walk through the linked list of callbacks twice,\n            // first to trigger the event, then to trigger any `\"all\"` callbacks.\n            event = events.shift();\n            while (event) {\n                node = calls[event];\n                if (node) {\n                    tail = node.tail;\n                    while ((node = node.next) !== tail) {\n                        node.callback.apply(node.context || this, rest);\n                    }\n                }\n                node = all;\n                if (node) {\n                    tail = node.tail;\n                    args = [event].concat(rest);\n                    while ((node = node.next) !== tail) {\n                        node.callback.apply(node.context || this, args);\n                    }\n                }\n                event = events.shift();\n            }\n\n            return this;\n        }\n    };\n\n    /**\n   * @function\n   */\n    Bmob.Events.bind = Bmob.Events.on;\n\n    /**\n   * @function\n   */\n    Bmob.Events.unbind = Bmob.Events.off;\n\n    /**\n   * 通过下面的任意一种形式可以创建GeoPoint<br>\n   *   <pre>\n   *   new GeoPoint(otherGeoPoint)\n   *   new GeoPoint(30, 30)\n   *   new GeoPoint([30, 30])\n   *   new GeoPoint({latitude: 30, longitude: 30})\n   *   new GeoPoint()  // defaults to (0, 0)\n   *   </pre>\n   * @class\n   *\n   * <p>在BmobObject中使用坐标点，或者在geo查询中使用</p>\n   * <p>在一个表中只有一个字段能使用GeoPoint.</p>\n   *\n   * <p>Example:<pre>\n   *   var point = new Bmob.GeoPoint(30.0, -20.0);\n   *   var object = new Bmob.Object(\"PlaceObject\");\n   *   object.set(\"location\", point);\n   *   object.save();</pre></p>\n   */\n    Bmob.GeoPoint = function (arg1, arg2) {\n        if (_.isArray(arg1)) {\n            Bmob.GeoPoint._validate(arg1[0], arg1[1]);\n            this.latitude = arg1[0];\n            this.longitude = arg1[1];\n        } else if (_.isObject(arg1)) {\n            Bmob.GeoPoint._validate(arg1.latitude, arg1.longitude);\n            this.latitude = arg1.latitude;\n            this.longitude = arg1.longitude;\n        } else if (_.isNumber(arg1) && _.isNumber(arg2)) {\n            Bmob.GeoPoint._validate(arg1, arg2);\n            this.latitude = arg1;\n            this.longitude = arg2;\n        } else {\n            this.latitude = 0;\n            this.longitude = 0;\n        }\n\n        // Add properties so that anyone using Webkit or Mozilla will get an error\n        // if they try to set values that are out of bounds.\n        var self = this;\n        if (this.__defineGetter__ && this.__defineSetter__) {\n            // Use _latitude and _longitude to actually store the values, and add\n            // getters and setters for latitude and longitude.\n            this._latitude = this.latitude;\n            this._longitude = this.longitude;\n            this.__defineGetter__(\"latitude\",\n                function () {\n                    return self._latitude;\n                });\n            this.__defineGetter__(\"longitude\",\n                function () {\n                    return self._longitude;\n                });\n            this.__defineSetter__(\"latitude\",\n                function (val) {\n                    Bmob.GeoPoint._validate(val, self.longitude);\n                    self._latitude = val;\n                });\n            this.__defineSetter__(\"longitude\",\n                function (val) {\n                    Bmob.GeoPoint._validate(self.latitude, val);\n                    self._longitude = val;\n                });\n        }\n    };\n\n    /**\n   * @lends Bmob.GeoPoint.prototype\n   * @property {float} latitude North-south portion of the coordinate, in range\n   *   [-90, 90].  Throws an exception if set out of range in a modern browser.\n   * @property {float} longitude East-west portion of the coordinate, in range\n   *   [-180, 180].  Throws if set out of range in a modern browser.\n   */\n\n    /**\n   * Throws an exception if the given lat-long is out of bounds.\n   */\n    Bmob.GeoPoint._validate = function (latitude, longitude) {\n        if (latitude < -90.0) {\n            throw \"Bmob.GeoPoint latitude \" + latitude + \" < -90.0.\";\n        }\n        if (latitude > 90.0) {\n            throw \"Bmob.GeoPoint latitude \" + latitude + \" > 90.0.\";\n        }\n        if (longitude < -180.0) {\n            throw \"Bmob.GeoPoint longitude \" + longitude + \" < -180.0.\";\n        }\n        if (longitude > 180.0) {\n            throw \"Bmob.GeoPoint longitude \" + longitude + \" > 180.0.\";\n        }\n    };\n\n    /**\n   * 使用用户当前的位置创建GeoPoint对象。\n   * 成功时调用options.success，或者options.error。\n   * @param {Object} options 调用成功或失败的回调\n   */\n    Bmob.GeoPoint.current = function (options) {\n        var promise = new Bmob.Promise();\n        navigator.geolocation.getCurrentPosition(function (location) {\n            promise.resolve(new Bmob.GeoPoint({\n                latitude: location.coords.latitude,\n                longitude: location.coords.longitude\n            }));\n\n        },\n            function (error) {\n                promise.reject(error);\n            });\n\n        return promise._thenRunCallbacks(options);\n    };\n\n    Bmob.GeoPoint.prototype = {\n        /**\n     * 返回geopoint的json\n     * @return {Object}\n     */\n        toJSON: function () {\n            Bmob.GeoPoint._validate(this.latitude, this.longitude);\n            return {\n                \"__type\": \"GeoPoint\",\n                latitude: this.latitude,\n                longitude: this.longitude\n            };\n        },\n\n        /**\n     * 返回两个geopoint之间的弧度\n     * @param {Bmob.GeoPoint} point 另一个Bmob.GeoPoint.\n     * @return {Number}\n     */\n        radiansTo: function (point) {\n            var d2r = Math.PI / 180.0;\n            var lat1rad = this.latitude * d2r;\n            var long1rad = this.longitude * d2r;\n            var lat2rad = point.latitude * d2r;\n            var long2rad = point.longitude * d2r;\n            var deltaLat = lat1rad - lat2rad;\n            var deltaLong = long1rad - long2rad;\n            var sinDeltaLatDiv2 = Math.sin(deltaLat / 2);\n            var sinDeltaLongDiv2 = Math.sin(deltaLong / 2);\n            // Square of half the straight line chord distance between both points.\n            var a = ((sinDeltaLatDiv2 * sinDeltaLatDiv2) + (Math.cos(lat1rad) * Math.cos(lat2rad) * sinDeltaLongDiv2 * sinDeltaLongDiv2));\n            a = Math.min(1.0, a);\n            return 2 * Math.asin(Math.sqrt(a));\n        },\n\n        /**\n     * 返回两个geopoint之间的千米数\n     * @param {Bmob.GeoPoint} point 另一个Bmob.GeoPoint.\n     * @return {Number}\n     */\n        kilometersTo: function (point) {\n            return this.radiansTo(point) * 6371.0;\n        },\n\n        /**\n     * 返回两个geopoint之间的米数\n     * @param {Bmob.GeoPoint} point 另一个Bmob.GeoPoint.\n     * @return {Number}\n     */\n        milesTo: function (point) {\n            return this.radiansTo(point) * 3958.8;\n        }\n    };\n\n    var PUBLIC_KEY = \"*\";\n\n    /**\n   * 创建ACL\n   * 如果传任何参数，则任何人都没有权限\n   * 如果传入的参数是Bmob.User，那个usr会有读写权限。\n   * 如果传入的参数是json对象，则会有相应的acl权限。\n   * \n   * @see Bmob.Object#setACL\n   * @class\n   *\n   * <p>权限控制可以被添加到任何\n   * <code>Bmob.Object</code>，用来控制用户的访问权限\n   * </p>\n   */\n    Bmob.ACL = function (arg1) {\n        var self = this;\n        self.permissionsById = {};\n        if (_.isObject(arg1)) {\n            if (arg1 instanceof Bmob.User) {\n                self.setReadAccess(arg1, true);\n                self.setWriteAccess(arg1, true);\n            } else {\n                if (_.isFunction(arg1)) {\n                    throw \"Bmob.ACL() called with a function.  Did you forget ()?\";\n                }\n                Bmob._objectEach(arg1,\n                    function (accessList, userId) {\n                        if (!_.isString(userId)) {\n                            throw \"Tried to create an ACL with an invalid userId.\";\n                        }\n                        self.permissionsById[userId] = {};\n                        Bmob._objectEach(accessList,\n                            function (allowed, permission) {\n                                if (permission !== \"read\" && permission !== \"write\") {\n                                    throw \"Tried to create an ACL with an invalid permission type.\";\n                                }\n                                if (!_.isBoolean(allowed)) {\n                                    throw \"Tried to create an ACL with an invalid permission value.\";\n                                }\n                                self.permissionsById[userId][permission] = allowed;\n                            });\n                    });\n            }\n        }\n    };\n\n    /**\n   * 返回acl的json对象\n   * @return {Object}\n   */\n    Bmob.ACL.prototype.toJSON = function () {\n        return _.clone(this.permissionsById);\n    };\n\n    Bmob.ACL.prototype._setAccess = function (accessType, userId, allowed) {\n        if (userId instanceof Bmob.User) {\n            userId = userId.id;\n        } else if (userId instanceof Bmob.Role) {\n            userId = \"role:\" + userId.getName();\n        }\n        if (!_.isString(userId)) {\n            throw \"userId must be a string.\";\n        }\n        if (!_.isBoolean(allowed)) {\n            throw \"allowed must be either true or false.\";\n        }\n        var permissions = this.permissionsById[userId];\n        if (!permissions) {\n            if (!allowed) {\n                // The user already doesn't have this permission, so no action needed.\n                return;\n            } else {\n                permissions = {};\n                this.permissionsById[userId] = permissions;\n            }\n        }\n\n        if (allowed) {\n            this.permissionsById[userId][accessType] = true;\n        } else {\n            delete permissions[accessType];\n            if (_.isEmpty(permissions)) {\n                delete permissions[userId];\n            }\n        }\n    };\n\n    Bmob.ACL.prototype._getAccess = function (accessType, userId) {\n        if (userId instanceof Bmob.User) {\n            userId = userId.id;\n        } else if (userId instanceof Bmob.Role) {\n            userId = \"role:\" + userId.getName();\n        }\n        var permissions = this.permissionsById[userId];\n        if (!permissions) {\n            return false;\n        }\n        return permissions[accessType] ? true : false;\n    };\n\n    /**\n   * 设置是否允许用户读取这个对象\n   * @param 用户id或对象id，或Bmob.Role\n   * @param {Boolean} 用户是否有读的权限\n   */\n    Bmob.ACL.prototype.setReadAccess = function (userId, allowed) {\n        this._setAccess(\"read\", userId, allowed);\n    };\n\n    /**\n   * 用户是否有读的权限。\n   * 就算是返回false，用户或许可以访问对象，如果getPublicReadAccess返回ture，或者用户的角色有写的权限。\n   * @param userId 户id或对象id, 或者Bmob.Role.\n   * @return {Boolean}\n   */\n    Bmob.ACL.prototype.getReadAccess = function (userId) {\n        return this._getAccess(\"read\", userId);\n    };\n\n    /**\n   * 设置是否允许用户有写的权限\n   * @param userId 用户id或对象id，或Bmob.Role\n   * @param {Boolean} 用户是否有写的权限\n   */\n    Bmob.ACL.prototype.setWriteAccess = function (userId, allowed) {\n        this._setAccess(\"write\", userId, allowed);\n    };\n\n    /**\n   * 用户是否有写的权限。\n   * 就算是返回false，用户或许可以访问对象，如果getPublicReadAccess返回ture，或者用户的角色有写的权限。\n   * @param userId 用户id或对象id，或Bmob.Role\n   * @return {Boolean}\n   */\n    Bmob.ACL.prototype.getWriteAccess = function (userId) {\n        return this._getAccess(\"write\", userId);\n    };\n\n    /**\n   * 设置所有用户有读的权限。\n   * @param {Boolean} allowed\n   */\n    Bmob.ACL.prototype.setPublicReadAccess = function (allowed) {\n        this.setReadAccess(PUBLIC_KEY, allowed);\n    };\n\n    /**\n   * 是否所有用户有读的权限。\n   * @return {Boolean}\n   */\n    Bmob.ACL.prototype.getPublicReadAccess = function () {\n        return this.getReadAccess(PUBLIC_KEY);\n    };\n\n    /**\n   * 设置所有用户有写的权限。\n   * @param {Boolean} allowed\n   */\n    Bmob.ACL.prototype.setPublicWriteAccess = function (allowed) {\n        this.setWriteAccess(PUBLIC_KEY, allowed);\n    };\n\n    /**\n   * 是否所有用户有写的权限。\n   * @return {Boolean}\n   */\n    Bmob.ACL.prototype.getPublicWriteAccess = function () {\n        return this.getWriteAccess(PUBLIC_KEY);\n    };\n\n    /**\n   * 用户所属的角色是否允许读这个对象。就算返回false，这个角色或许有读的权限，如果他的父角色有读的权限。\n   * @param role 角色名称，或者 Bmob.Role。\n   * @return {Boolean} 有读的权限返回true。\n   * @throws {String} role不是Bmob.Role或字符串。\n   */\n    Bmob.ACL.prototype.getRoleReadAccess = function (role) {\n        if (role instanceof Bmob.Role) {\n            // Normalize to the String name\n            role = role.getName();\n        }\n        if (_.isString(role)) {\n            return this.getReadAccess(\"role:\" + role);\n        }\n        throw \"role must be a Bmob.Role or a String\";\n    };\n\n    /**\n   * 用户所属的角色是否允许写这个对象。就算返回false，这个角色或许有写的权限，如果他的父角色有写的权限。\n   * @param role 角色名称，或者 Bmob.Role。\n   * @return {Boolean} 有写的权限返回true。\n   * @throws {String} role不是Bmob.Role或字符串。\n   */\n    Bmob.ACL.prototype.getRoleWriteAccess = function (role) {\n        if (role instanceof Bmob.Role) {\n            // Normalize to the String name\n            role = role.getName();\n        }\n        if (_.isString(role)) {\n            return this.getWriteAccess(\"role:\" + role);\n        }\n        throw \"role must be a Bmob.Role or a String\";\n    };\n\n    /**\n   * 设置用户所属的角色有读的权限\n   * @param role 角色名称，或者 Bmob.Role。\n   * @param {Boolean} 允许角色读这个对象\n   * @throws {String}  role不是Bmob.Role或字符串。\n   */\n    Bmob.ACL.prototype.setRoleReadAccess = function (role, allowed) {\n        if (role instanceof Bmob.Role) {\n            // Normalize to the String name\n            role = role.getName();\n        }\n        if (_.isString(role)) {\n            this.setReadAccess(\"role:\" + role, allowed);\n            return;\n        }\n        throw \"role must be a Bmob.Role or a String\";\n    };\n\n    /**\n   * 设置用户所属的角色有写的权限\n   * @param role 角色名称，或者 Bmob.Role。\n   * @param {Boolean} 允许角色写这个对象\n   * @throws {String}  role不是Bmob.Role或字符串。\n   */\n    Bmob.ACL.prototype.setRoleWriteAccess = function (role, allowed) {\n        if (role instanceof Bmob.Role) {\n            // Normalize to the String name\n            role = role.getName();\n        }\n        if (_.isString(role)) {\n            this.setWriteAccess(\"role:\" + role, allowed);\n            return;\n        }\n        throw \"role must be a Bmob.Role or a String\";\n    };\n\n    /**\n   * A Bmob.Op is an atomic operation that can be applied to a field in a\n   * Bmob.Object. For example, calling <code>object.set(\"foo\", \"bar\")</code>\n   * is an example of a Bmob.Op.Set. Calling <code>object.unset(\"foo\")</code>\n   * is a Bmob.Op.Unset. These operations are stored in a Bmob.Object and\n   * sent to the server as part of <code>object.save()</code> operations.\n   * Instances of Bmob.Op should be immutable.\n   *\n   * You should not create subclasses of Bmob.Op or instantiate Bmob.Op\n   * directly.\n   */\n    Bmob.Op = function () {\n        this._initialize.apply(this, arguments);\n    };\n\n    Bmob.Op.prototype = {\n        _initialize: function () { }\n    };\n\n    _.extend(Bmob.Op, {\n        /**\n     * To create a new Op, call Bmob.Op._extend();\n     */\n        _extend: Bmob._extend,\n\n        // A map of __op string to decoder function.\n        _opDecoderMap: {},\n\n        /**\n     * Registers a function to convert a json object with an __op field into an\n     * instance of a subclass of Bmob.Op.\n     */\n        _registerDecoder: function (opName, decoder) {\n            Bmob.Op._opDecoderMap[opName] = decoder;\n        },\n\n        /**\n     * Converts a json object into an instance of a subclass of Bmob.Op.\n     */\n        _decode: function (json) {\n            var decoder = Bmob.Op._opDecoderMap[json.__op];\n            if (decoder) {\n                return decoder(json);\n            } else {\n                return undefined;\n            }\n        }\n    });\n\n    /*\n   * Add a handler for Batch ops.\n   */\n    Bmob.Op._registerDecoder(\"Batch\",\n        function (json) {\n            var op = null;\n            Bmob._arrayEach(json.ops,\n                function (nextOp) {\n                    nextOp = Bmob.Op._decode(nextOp);\n                    op = nextOp._mergeWithPrevious(op);\n                });\n            return op;\n        });\n\n    /**\n   * @class\n   * set操作是表明字段的值会在Bmob.Object.set中改变，或者这确定要修改值。\n   */\n    Bmob.Op.Set = Bmob.Op._extend(\n        /** @lends Bmob.Op.Set.prototype */\n        {\n            _initialize: function (value) {\n                this._value = value;\n            },\n\n            /**\n         * 返回设置后的新值\n         */\n            value: function () {\n                return this._value;\n            },\n\n            /**\n         * 返回发送到bmob的json\n         * @return {Object}\n         */\n            toJSON: function () {\n                return Bmob._encode(this.value());\n            },\n\n            _mergeWithPrevious: function (previous) {\n                return this;\n            },\n\n            _estimate: function (oldValue) {\n                return this.value();\n            }\n        });\n\n    /**\n   * A sentinel value that is returned by Bmob.Op.Unset._estimate to\n   * indicate the field should be deleted. Basically, if you find _UNSET as a\n   * value in your object, you should remove that key.\n   */\n    Bmob.Op._UNSET = {};\n\n    /**\n   * @class\n   * Unset 操作表明字段将会从对象中删除。\n   */\n    Bmob.Op.Unset = Bmob.Op._extend(\n        /** @lends Bmob.Op.Unset.prototype */\n        {\n            /**\n         * 返回发送到bmob的json\n         * @return {Object}\n         */\n            toJSON: function () {\n                return {\n                    __op: \"Delete\"\n                };\n            },\n\n            _mergeWithPrevious: function (previous) {\n                return this;\n            },\n\n            _estimate: function (oldValue) {\n                return Bmob.Op._UNSET;\n            }\n        });\n\n    Bmob.Op._registerDecoder(\"Delete\",\n        function (json) {\n            return new Bmob.Op.Unset();\n        });\n\n    /**\n   * @class\n   * 将字段的值自增或自减\n   */\n    Bmob.Op.Increment = Bmob.Op._extend(\n        /** @lends Bmob.Op.Increment.prototype */\n        {\n\n            _initialize: function (amount) {\n                this._amount = amount;\n            },\n\n            /**\n         * 返回添加的数目。\n         * @return {Number} 增加或减少的数目。\n         */\n            amount: function () {\n                return this._amount;\n            },\n\n            /**\n         * 返回发送到bmob的json\n         * @return {Object}\n         */\n            toJSON: function () {\n                return {\n                    __op: \"Increment\",\n                    amount: this._amount\n                };\n            },\n\n            _mergeWithPrevious: function (previous) {\n                if (!previous) {\n                    return this;\n                } else if (previous instanceof Bmob.Op.Unset) {\n                    return new Bmob.Op.Set(this.amount());\n                } else if (previous instanceof Bmob.Op.Set) {\n                    return new Bmob.Op.Set(previous.value() + this.amount());\n                } else if (previous instanceof Bmob.Op.Increment) {\n                    return new Bmob.Op.Increment(this.amount() + previous.amount());\n                } else {\n                    throw \"Op is invalid after previous op.\";\n                }\n            },\n\n            _estimate: function (oldValue) {\n                if (!oldValue) {\n                    return this.amount();\n                }\n                return oldValue + this.amount();\n            }\n        });\n\n    Bmob.Op._registerDecoder(\"Increment\",\n        function (json) {\n            return new Bmob.Op.Increment(json.amount);\n        });\n\n    /**\n   * @class\n   * 添加一个对象到数组中，不管元素是否存在。\n   */\n    Bmob.Op.Add = Bmob.Op._extend(\n        /** @lends Bmob.Op.Add.prototype */\n        {\n            _initialize: function (objects) {\n                this._objects = objects;\n            },\n\n            /**\n         * 返回添加到数组中的对象\n         * @return {Array} 添加到数组中的对象\n         */\n            objects: function () {\n                return this._objects;\n            },\n\n            /**\n         * 返回发送到bmob的json\n         * @return {Object}\n         */\n            toJSON: function () {\n                return {\n                    __op: \"Add\",\n                    objects: Bmob._encode(this.objects())\n                };\n            },\n\n            _mergeWithPrevious: function (previous) {\n                if (!previous) {\n                    return this;\n                } else if (previous instanceof Bmob.Op.Unset) {\n                    return new Bmob.Op.Set(this.objects());\n                } else if (previous instanceof Bmob.Op.Set) {\n                    return new Bmob.Op.Set(this._estimate(previous.value()));\n                } else if (previous instanceof Bmob.Op.Add) {\n                    return new Bmob.Op.Add(previous.objects().concat(this.objects()));\n                } else {\n                    throw \"Op is invalid after previous op.\";\n                }\n            },\n\n            _estimate: function (oldValue) {\n                if (!oldValue) {\n                    return _.clone(this.objects());\n                } else {\n                    return oldValue.concat(this.objects());\n                }\n            }\n        });\n\n    Bmob.Op._registerDecoder(\"Add\",\n        function (json) {\n            return new Bmob.Op.Add(Bmob._decode(undefined, json.objects));\n        });\n\n    /**\n   * @class\n   * 添加一个元素到数组中，当元素已经存在，将不会重复添加。\n   */\n    Bmob.Op.AddUnique = Bmob.Op._extend(\n        /** @lends Bmob.Op.AddUnique.prototype */\n        {\n\n            _initialize: function (objects) {\n                this._objects = _.uniq(objects);\n            },\n\n            /**\n         * 返回添加到数组中的对象\n         * @return {Array} 添加到数组中的对象\n         */\n            objects: function () {\n                return this._objects;\n            },\n\n            /**\n         * 返回发送到bmob的json\n         * @return {Object}\n         */\n            toJSON: function () {\n                return {\n                    __op: \"AddUnique\",\n                    objects: Bmob._encode(this.objects())\n                };\n            },\n\n            _mergeWithPrevious: function (previous) {\n                if (!previous) {\n                    return this;\n                } else if (previous instanceof Bmob.Op.Unset) {\n                    return new Bmob.Op.Set(this.objects());\n                } else if (previous instanceof Bmob.Op.Set) {\n                    return new Bmob.Op.Set(this._estimate(previous.value()));\n                } else if (previous instanceof Bmob.Op.AddUnique) {\n                    return new Bmob.Op.AddUnique(this._estimate(previous.objects()));\n                } else {\n                    throw \"Op is invalid after previous op.\";\n                }\n            },\n\n            _estimate: function (oldValue) {\n                if (!oldValue) {\n                    return _.clone(this.objects());\n                } else {\n                    // We can't just take the _.uniq(_.union(...)) of oldValue and\n                    // this.objects, because the uniqueness may not apply to oldValue\n                    // (especially if the oldValue was set via .set())\n                    var newValue = _.clone(oldValue);\n                    Bmob._arrayEach(this.objects(),\n                        function (obj) {\n                            if (obj instanceof Bmob.Object && obj.id) {\n                                var matchingObj = _.find(newValue,\n                                    function (anObj) {\n                                        return (anObj instanceof Bmob.Object) && (anObj.id === obj.id);\n                                    });\n                                if (!matchingObj) {\n                                    newValue.push(obj);\n                                } else {\n                                    var index = _.indexOf(newValue, matchingObj);\n                                    newValue[index] = obj;\n                                }\n                            } else if (!_.contains(newValue, obj)) {\n                                newValue.push(obj);\n                            }\n                        });\n                    return newValue;\n                }\n            }\n        });\n\n    Bmob.Op._registerDecoder(\"AddUnique\",\n        function (json) {\n            return new Bmob.Op.AddUnique(Bmob._decode(undefined, json.objects));\n        });\n\n    /**\n   * @class\n   * 从数组中移除一个元素。\n   */\n    Bmob.Op.Remove = Bmob.Op._extend(\n        /** @lends Bmob.Op.Remove.prototype */\n        {\n            _initialize: function (objects) {\n                this._objects = _.uniq(objects);\n            },\n\n            /**\n         * 返回移除出数组的对象\n         * @return {Array} 移除出数组的对象\n         */\n            objects: function () {\n                return this._objects;\n            },\n\n            /**\n         * 返回发送到bmob的json\n         * @return {Object}\n         */\n            toJSON: function () {\n                return {\n                    __op: \"Remove\",\n                    objects: Bmob._encode(this.objects())\n                };\n            },\n\n            _mergeWithPrevious: function (previous) {\n                if (!previous) {\n                    return this;\n                } else if (previous instanceof Bmob.Op.Unset) {\n                    return previous;\n                } else if (previous instanceof Bmob.Op.Set) {\n                    return new Bmob.Op.Set(this._estimate(previous.value()));\n                } else if (previous instanceof Bmob.Op.Remove) {\n                    return new Bmob.Op.Remove(_.union(previous.objects(), this.objects()));\n                } else {\n                    throw \"Op is invalid after previous op.\";\n                }\n            },\n\n            _estimate: function (oldValue) {\n                if (!oldValue) {\n                    return [];\n                } else {\n                    var newValue = _.difference(oldValue, this.objects());\n                    // If there are saved Bmob Objects being removed, also remove them.\n                    Bmob._arrayEach(this.objects(),\n                        function (obj) {\n                            if (obj instanceof Bmob.Object && obj.id) {\n                                newValue = _.reject(newValue,\n                                    function (other) {\n                                        return (other instanceof Bmob.Object) && (other.id === obj.id);\n                                    });\n                            }\n                        });\n                    return newValue;\n                }\n            }\n        });\n\n    Bmob.Op._registerDecoder(\"Remove\",\n        function (json) {\n            return new Bmob.Op.Remove(Bmob._decode(undefined, json.objects));\n        });\n\n    /**\n   * @class\n   * 关系操作标明这个字段是Bmob.Relation的实体，同时对象可以从关系中添加或移除\n   */\n    Bmob.Op.Relation = Bmob.Op._extend(\n        /** @lends Bmob.Op.Relation.prototype */\n        {\n\n            _initialize: function (adds, removes) {\n                this._targetClassName = null;\n\n                var self = this;\n\n                var pointerToId = function (object) {\n                    if (object instanceof Bmob.Object) {\n                        if (!object.id) {\n                            throw \"You can't add an unsaved Bmob.Object to a relation.\";\n                        }\n                        if (!self._targetClassName) {\n                            self._targetClassName = object.className;\n                        }\n                        if (self._targetClassName !== object.className) {\n                            throw \"Tried to create a Bmob.Relation with 2 different types: \" + self._targetClassName + \" and \" + object.className + \".\";\n                        }\n                        return object.id;\n                    }\n                    return object;\n                };\n\n                this.relationsToAdd = _.uniq(_.map(adds, pointerToId));\n                this.relationsToRemove = _.uniq(_.map(removes, pointerToId));\n            },\n\n            /**\n         * 返回添加到关系中的Bmob.Object的数组对象\n         * @return {Array}\n         */\n            added: function () {\n                var self = this;\n                return _.map(this.relationsToAdd,\n                    function (objectId) {\n                        var object = Bmob.Object._create(self._targetClassName);\n                        object.id = objectId;\n                        return object;\n                    });\n            },\n\n            /**\n         * 返回移除的Bmob.Object的数组对象\n         * @return {Array}\n         */\n            removed: function () {\n                var self = this;\n                return _.map(this.relationsToRemove,\n                    function (objectId) {\n                        var object = Bmob.Object._create(self._targetClassName);\n                        object.id = objectId;\n                        return object;\n                    });\n            },\n\n            /**\n         * 返回发送到bmob的json\n         * @return {Object}\n         */\n            toJSON: function () {\n                var adds = null;\n                var removes = null;\n                var self = this;\n                var idToPointer = function (id) {\n                    return {\n                        __type: 'Pointer',\n                        className: self._targetClassName,\n                        objectId: id\n                    };\n                };\n                var pointers = null;\n                if (this.relationsToAdd.length > 0) {\n                    pointers = _.map(this.relationsToAdd, idToPointer);\n                    adds = {\n                        \"__op\": \"AddRelation\",\n                        \"objects\": pointers\n                    };\n                }\n\n                if (this.relationsToRemove.length > 0) {\n                    pointers = _.map(this.relationsToRemove, idToPointer);\n                    removes = {\n                        \"__op\": \"RemoveRelation\",\n                        \"objects\": pointers\n                    };\n                }\n\n                if (adds && removes) {\n                    return {\n                        \"__op\": \"Batch\",\n                        \"ops\": [adds, removes]\n                    };\n                }\n\n                return adds || removes || {};\n            },\n\n            _mergeWithPrevious: function (previous) {\n                if (!previous) {\n                    return this;\n                } else if (previous instanceof Bmob.Op.Unset) {\n                    throw \"You can't modify a relation after deleting it.\";\n                } else if (previous instanceof Bmob.Op.Relation) {\n                    if (previous._targetClassName && previous._targetClassName !== this._targetClassName) {\n                        throw \"Related object must be of class \" + previous._targetClassName + \", but \" + this._targetClassName + \" was passed in.\";\n                    }\n                    var newAdd = _.union(_.difference(previous.relationsToAdd, this.relationsToRemove), this.relationsToAdd);\n                    var newRemove = _.union(_.difference(previous.relationsToRemove, this.relationsToAdd), this.relationsToRemove);\n\n                    var newRelation = new Bmob.Op.Relation(newAdd, newRemove);\n                    newRelation._targetClassName = this._targetClassName;\n                    return newRelation;\n                } else {\n                    throw \"Op is invalid after previous op.\";\n                }\n            },\n\n            _estimate: function (oldValue, object, key) {\n                if (!oldValue) {\n                    var relation = new Bmob.Relation(object, key);\n                    relation.targetClassName = this._targetClassName;\n                } else if (oldValue instanceof Bmob.Relation) {\n                    if (this._targetClassName) {\n                        if (oldValue.targetClassName) {\n                            if (oldValue.targetClassName !== this._targetClassName) {\n                                throw \"Related object must be a \" + oldValue.targetClassName + \", but a \" + this._targetClassName + \" was passed in.\";\n                            }\n                        } else {\n                            oldValue.targetClassName = this._targetClassName;\n                        }\n                    }\n                    return oldValue;\n                } else {\n                    throw \"Op is invalid after previous op.\";\n                }\n            }\n        });\n\n    Bmob.Op._registerDecoder(\"AddRelation\",\n        function (json) {\n            return new Bmob.Op.Relation(Bmob._decode(undefined, json.objects), []);\n        });\n    Bmob.Op._registerDecoder(\"RemoveRelation\",\n        function (json) {\n            return new Bmob.Op.Relation([], Bmob._decode(undefined, json.objects));\n        });\n\n    /**\n   * Creates a new Relation for the given parent object and key. This\n   * constructor should rarely be used directly, but rather created by\n   * Bmob.Object.relation.\n   * @param {Bmob.Object} parent The parent of this relation.\n   * @param {String} key The key for this relation on the parent.\n   * @see Bmob.Object#relation\n   *\n   * <p>\n   * A class that is used to access all of the children of a many-to-many\n   * relationship.  Each instance of Bmob.Relation is associated with a\n   * particular parent object and key.\n   * </p>\n   */\n    Bmob.Relation = function (parent, key) {\n        this.parent = parent;\n        this.key = key;\n        this.targetClassName = null;\n    };\n\n    /**\n   * Creates a query that can be used to query the parent objects in this relation.\n   * @param {String} parentClass The parent class or name.\n   * @param {String} relationKey The relation field key in parent.\n   * @param {Bmob.Object} child The child object.\n   * @return {Bmob.Query}\n   */\n    Bmob.Relation.reverseQuery = function (parentClass, relationKey, child) {\n        var query = new Bmob.Query(parentClass);\n        query.equalTo(relationKey, child._toPointer());\n        return query;\n    };\n\n    Bmob.Relation.prototype = {\n        /**\n     * Makes sure that this relation has the right parent and key.\n     */\n        _ensureParentAndKey: function (parent, key) {\n            this.parent = this.parent || parent;\n            this.key = this.key || key;\n            if (this.parent !== parent) {\n                throw \"Internal Error. Relation retrieved from two different Objects.\";\n            }\n            if (this.key !== key) {\n                throw \"Internal Error. Relation retrieved from two different keys.\";\n            }\n        },\n\n        /**\n     * Adds a Bmob.Object or an array of Bmob.Objects to the relation.\n     * @param {} objects The item or items to add.\n     */\n        add: function (objects) {\n            if (!_.isArray(objects)) {\n                objects = [objects];\n            }\n\n            var change = new Bmob.Op.Relation(objects, []);\n            this.parent.set(this.key, change);\n            this.targetClassName = change._targetClassName;\n        },\n\n        /**\n     * Removes a Bmob.Object or an array of Bmob.Objects from this relation.\n     * @param {} objects The item or items to remove.\n     */\n        remove: function (objects) {\n            if (!_.isArray(objects)) {\n                objects = [objects];\n            }\n\n            var change = new Bmob.Op.Relation([], objects);\n            this.parent.set(this.key, change);\n            this.targetClassName = change._targetClassName;\n        },\n\n        /**\n     * Returns a JSON version of the object suitable for saving to disk.\n     * @return {Object}\n     */\n        toJSON: function () {\n            return {\n                \"__type\": \"Relation\",\n                \"className\": this.targetClassName\n            };\n        },\n\n        /**\n     * Returns a Bmob.Query that is limited to objects in this\n     * relation.\n     * @return {Bmob.Query}\n     */\n        query: function () {\n            var targetClass;\n            var query;\n            if (!this.targetClassName) {\n                targetClass = Bmob.Object._getSubclass(this.parent.className);\n                query = new Bmob.Query(targetClass);\n                query._extraOptions.redirectClassNameForKey = this.key;\n            } else {\n                targetClass = Bmob.Object._getSubclass(this.targetClassName);\n                query = new Bmob.Query(targetClass);\n            }\n            query._addCondition(\"$relatedTo\", \"object\", this.parent._toPointer());\n            query._addCondition(\"$relatedTo\", \"key\", this.key);\n\n            return query;\n        }\n    };\n\n    /**\n   * A Promise is returned by async methods as a hook to provide callbacks to be\n   * called when the async task is fulfilled.\n   *\n   * <p>Typical usage would be like:<pre>\n   *    query.findAsync().then(function(results) {\n   *      results[0].set(\"foo\", \"bar\");\n   *      return results[0].saveAsync();\n   *    }).then(function(result) {\n   *      console.log(\"Updated \" + result.id);\n   *    });\n   * </pre></p>\n   *\n   * @see Bmob.Promise.prototype.next\n   */\n    Bmob.Promise = function () {\n        this._resolved = false;\n        this._rejected = false;\n        this._resolvedCallbacks = [];\n        this._rejectedCallbacks = [];\n    };\n\n    _.extend(Bmob.Promise,\n        /** @lends Bmob.Promise */\n        {\n\n            /**\n         * Returns true iff the given object fulfils the Promise interface.\n         * @return {Boolean}\n         */\n            is: function (promise) {\n                return promise && promise.then && _.isFunction(promise.then);\n            },\n\n            /**\n         * Returns a new promise that is resolved with a given value.\n         * @return {Bmob.Promise} the new promise.\n         */\n            as: function () {\n                var promise = new Bmob.Promise();\n                promise.resolve.apply(promise, arguments);\n                return promise;\n            },\n\n            /**\n         * Returns a new promise that is rejected with a given error.\n         * @return {Bmob.Promise} the new promise.\n         */\n            error: function () {\n                var promise = new Bmob.Promise();\n                promise.reject.apply(promise, arguments);\n                return promise;\n            },\n\n            /**\n         * Returns a new promise that is fulfilled when all of the input promises\n         * are resolved. If any promise in the list fails, then the returned promise\n         * will fail with the last error. If they all succeed, then the returned\n         * promise will succeed, with the result being an array with the results of\n         * all the input promises.\n         * @param {Array} promises a list of promises to wait for.\n         * @return {Bmob.Promise} the new promise.\n         */\n            when: function (promises) {\n                // Allow passing in Promises as separate arguments instead of an Array.\n                var objects;\n                if (promises && Bmob._isNullOrUndefined(promises.length)) {\n                    objects = arguments;\n                } else {\n                    objects = promises;\n                }\n\n                var total = objects.length;\n                var hadError = false;\n                var results = [];\n                var errors = [];\n                results.length = objects.length;\n                errors.length = objects.length;\n\n                if (total === 0) {\n                    return Bmob.Promise.as.apply(this, results);\n                }\n\n                var promise = new Bmob.Promise();\n\n                var resolveOne = function () {\n                    total = total - 1;\n                    if (total === 0) {\n                        if (hadError) {\n                            promise.reject(errors);\n                        } else {\n                            promise.resolve.apply(promise, results);\n                        }\n                    }\n                };\n\n                Bmob._arrayEach(objects,\n                    function (object, i) {\n                        if (Bmob.Promise.is(object)) {\n                            object.then(function (result) {\n                                results[i] = result;\n                                resolveOne();\n                            },\n                                function (error) {\n                                    errors[i] = error;\n                                    hadError = true;\n                                    resolveOne();\n                                });\n                        } else {\n                            results[i] = object;\n                            resolveOne();\n                        }\n                    });\n\n                return promise;\n            },\n\n            /**\n         * Runs the given asyncFunction repeatedly, as long as the predicate\n         * function returns a truthy value. Stops repeating if asyncFunction returns\n         * a rejected promise.\n         * @param {Function} predicate should return false when ready to stop.\n         * @param {Function} asyncFunction should return a Promise.\n         */\n            _continueWhile: function (predicate, asyncFunction) {\n                if (predicate()) {\n                    return asyncFunction().then(function () {\n                        return Bmob.Promise._continueWhile(predicate, asyncFunction);\n                    });\n                }\n                return Bmob.Promise.as();\n            }\n        });\n\n    _.extend(Bmob.Promise.prototype,\n        /** @lends Bmob.Promise.prototype */\n        {\n\n            /**\n         * Marks this promise as fulfilled, firing any callbacks waiting on it.\n         * @param {Object} result the result to pass to the callbacks.\n         */\n            resolve: function (result) {\n                if (this._resolved || this._rejected) {\n                    throw \"A promise was resolved even though it had already been \" + (this._resolved ? \"resolved\" : \"rejected\") + \".\";\n                }\n                this._resolved = true;\n                this._result = arguments;\n                var results = arguments;\n                Bmob._arrayEach(this._resolvedCallbacks,\n                    function (resolvedCallback) {\n                        resolvedCallback.apply(this, results);\n                    });\n                this._resolvedCallbacks = [];\n                this._rejectedCallbacks = [];\n            },\n\n            /**\n         * Marks this promise as fulfilled, firing any callbacks waiting on it.\n         * @param {Object} error the error to pass to the callbacks.\n         */\n            reject: function (error) {\n                if (this._resolved || this._rejected) {\n                    throw \"A promise was rejected even though it had already been \" + (this._resolved ? \"resolved\" : \"rejected\") + \".\";\n                }\n                this._rejected = true;\n                this._error = error;\n                Bmob._arrayEach(this._rejectedCallbacks,\n                    function (rejectedCallback) {\n                        rejectedCallback(error);\n                    });\n                this._resolvedCallbacks = [];\n                this._rejectedCallbacks = [];\n            },\n\n            /**\n         * Adds callbacks to be called when this promise is fulfilled. Returns a new\n         * Promise that will be fulfilled when the callback is complete. It allows\n         * chaining. If the callback itself returns a Promise, then the one returned\n         * by \"then\" will not be fulfilled until that one returned by the callback\n         * is fulfilled.\n         * @param {Function} resolvedCallback Function that is called when this\n         * Promise is resolved. Once the callback is complete, then the Promise\n         * returned by \"then\" will also be fulfilled.\n         * @param {Function} rejectedCallback Function that is called when this\n         * Promise is rejected with an error. Once the callback is complete, then\n         * the promise returned by \"then\" with be resolved successfully. If\n         * rejectedCallback is null, or it returns a rejected Promise, then the\n         * Promise returned by \"then\" will be rejected with that error.\n         * @return {Bmob.Promise} A new Promise that will be fulfilled after this\n         * Promise is fulfilled and either callback has completed. If the callback\n         * returned a Promise, then this Promise will not be fulfilled until that\n         * one is.\n         */\n            then: function (resolvedCallback, rejectedCallback) {\n                var promise = new Bmob.Promise();\n\n                var wrappedResolvedCallback = function () {\n                    var result = arguments;\n                    if (resolvedCallback) {\n                        result = [resolvedCallback.apply(this, result)];\n                    }\n                    if (result.length === 1 && Bmob.Promise.is(result[0])) {\n                        result[0].then(function () {\n                            promise.resolve.apply(promise, arguments);\n                        },\n                            function (error) {\n                                promise.reject(error);\n                            });\n                    } else {\n                        promise.resolve.apply(promise, result);\n                    }\n                };\n\n                var wrappedRejectedCallback = function (error) {\n                    var result = [];\n                    if (rejectedCallback) {\n                        result = [rejectedCallback(error)];\n                        if (result.length === 1 && Bmob.Promise.is(result[0])) {\n                            result[0].then(function () {\n                                promise.resolve.apply(promise, arguments);\n                            },\n                                function (error) {\n                                    promise.reject(error);\n                                });\n                        } else {\n                            // A Promises/A+ compliant implementation would call:\n                            // promise.resolve.apply(promise, result);\n                            promise.reject(result[0]);\n                        }\n                    } else {\n                        promise.reject(error);\n                    }\n                };\n\n                if (this._resolved) {\n                    wrappedResolvedCallback.apply(this, this._result);\n                } else if (this._rejected) {\n                    wrappedRejectedCallback(this._error);\n                } else {\n                    this._resolvedCallbacks.push(wrappedResolvedCallback);\n                    this._rejectedCallbacks.push(wrappedRejectedCallback);\n                }\n\n                return promise;\n            },\n\n            /**\n         * Run the given callbacks after this promise is fulfilled.\n         * @param optionsOrCallback {} A Backbone-style options callback, or a\n         * callback function. If this is an options object and contains a \"model\"\n         * attributes, that will be passed to error callbacks as the first argument.\n         * @param model {} If truthy, this will be passed as the first result of\n         * error callbacks. This is for Backbone-compatability.\n         * @return {Bmob.Promise} A promise that will be resolved after the\n         * callbacks are run, with the same result as this.\n         */\n            _thenRunCallbacks: function (optionsOrCallback, model) {\n                var options;\n                if (_.isFunction(optionsOrCallback)) {\n                    var callback = optionsOrCallback;\n                    options = {\n                        success: function (result) {\n                            callback(result, null);\n                        },\n                        error: function (error) {\n                            callback(null, error);\n                        }\n                    };\n                } else {\n                    options = _.clone(optionsOrCallback);\n                }\n                options = options || {};\n\n                return this.then(function (result) {\n                    if (options.success) {\n                        options.success.apply(this, arguments);\n                    } else if (model) {\n                        // When there's no callback, a sync event should be triggered.\n                        model.trigger('sync', model, result, options);\n                    }\n                    return Bmob.Promise.as.apply(Bmob.Promise, arguments);\n                },\n                    function (error) {\n                        if (options.error) {\n                            if (!_.isUndefined(model)) {\n                                options.error(model, error);\n                            } else {\n                                options.error(error);\n                            }\n                        } else if (model) {\n                            // When there's no error callback, an error event should be triggered.\n                            model.trigger('error', model, error, options);\n                        }\n                        // By explicitly returning a rejected Promise, this will work with\n                        // either jQuery or Promises/A semantics.\n                        return Bmob.Promise.error(error);\n                    });\n            },\n\n            /**\n         * Adds a callback function that should be called regardless of whether\n         * this promise failed or succeeded. The callback will be given either the\n         * array of results for its first argument, or the error as its second,\n         * depending on whether this Promise was rejected or resolved. Returns a\n         * new Promise, like \"then\" would.\n         * @param {Function} continuation the callback.\n         */\n            _continueWith: function (continuation) {\n                return this.then(function () {\n                    return continuation(arguments, null);\n                },\n                    function (error) {\n                        return continuation(null, error);\n                    });\n            }\n\n        });\n\n    var b64Digit = function (number) {\n        if (number < 26) {\n            return String.fromCharCode(65 + number);\n        }\n        if (number < 52) {\n            return String.fromCharCode(97 + (number - 26));\n        }\n        if (number < 62) {\n            return String.fromCharCode(48 + (number - 52));\n        }\n        if (number === 62) {\n            return \"+\";\n        }\n        if (number === 63) {\n            return \"/\";\n        }\n        throw \"Tried to encode large digit \" + number + \" in base64.\";\n    };\n\n    var encodeBase64 = function (str) {\n        var base64EncodeChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n        var out, i, len;\n        var c1, c2, c3;\n\n        len = str.length;\n        i = 0;\n        out = \"\";\n        while (i < len) {\n            c1 = str.charCodeAt(i++) & 0xff;\n            if (i == len) {\n                out += base64EncodeChars.charAt(c1 >> 2);\n                out += base64EncodeChars.charAt((c1 & 0x3) << 4);\n                out += \"==\";\n                break;\n            }\n            c2 = str.charCodeAt(i++);\n            if (i == len) {\n                out += base64EncodeChars.charAt(c1 >> 2);\n                out += base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));\n                out += base64EncodeChars.charAt((c2 & 0xF) << 2);\n                out += \"=\";\n                break;\n            }\n            c3 = str.charCodeAt(i++);\n            out += base64EncodeChars.charAt(c1 >> 2);\n            out += base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));\n            out += base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >> 6));\n            out += base64EncodeChars.charAt(c3 & 0x3F);\n        }\n        return out;\n\n    };\n\n    var utf16to8 = function (str) {\n        var out, i, len, c;\n\n        out = \"\";\n        len = str.length;\n        for (i = 0; i < len; i++) {\n            c = str.charCodeAt(i);\n            if ((c >= 0x0001) && (c <= 0x007F)) {\n                out += str.charAt(i);\n            } else if (c > 0x07FF) {\n                out += String.fromCharCode(0xE0 | ((c >> 12) & 0x0F));\n                out += String.fromCharCode(0x80 | ((c >> 6) & 0x3F));\n                out += String.fromCharCode(0x80 | ((c >> 0) & 0x3F));\n            } else {\n                out += String.fromCharCode(0xC0 | ((c >> 6) & 0x1F));\n                out += String.fromCharCode(0x80 | ((c >> 0) & 0x3F));\n            }\n        }\n        return out;\n\n    };\n\n    // A list of file extensions to mime types as found here:\n    // http://stackoverflow.com/questions/58510/using-net-how-can-you-find-the-\n    //     mime-type-of-a-file-based-on-the-file-signature\n    var mimeTypes = {\n        ai: \"application/postscript\",\n        aif: \"audio/x-aiff\",\n        aifc: \"audio/x-aiff\",\n        aiff: \"audio/x-aiff\",\n        asc: \"text/plain\",\n        atom: \"application/atom+xml\",\n        au: \"audio/basic\",\n        avi: \"video/x-msvideo\",\n        bcpio: \"application/x-bcpio\",\n        bin: \"application/octet-stream\",\n        bmp: \"image/bmp\",\n        cdf: \"application/x-netcdf\",\n        cgm: \"image/cgm\",\n        \"class\": \"application/octet-stream\",\n        cpio: \"application/x-cpio\",\n        cpt: \"application/mac-compactpro\",\n        csh: \"application/x-csh\",\n        css: \"text/css\",\n        dcr: \"application/x-director\",\n        dif: \"video/x-dv\",\n        dir: \"application/x-director\",\n        djv: \"image/vnd.djvu\",\n        djvu: \"image/vnd.djvu\",\n        dll: \"application/octet-stream\",\n        dmg: \"application/octet-stream\",\n        dms: \"application/octet-stream\",\n        doc: \"application/msword\",\n        docx: \"application/vnd.openxmlformats-officedocument.wordprocessingml.\" + \"document\",\n        dotx: \"application/vnd.openxmlformats-officedocument.wordprocessingml.\" + \"template\",\n        docm: \"application/vnd.ms-word.document.macroEnabled.12\",\n        dotm: \"application/vnd.ms-word.template.macroEnabled.12\",\n        dtd: \"application/xml-dtd\",\n        dv: \"video/x-dv\",\n        dvi: \"application/x-dvi\",\n        dxr: \"application/x-director\",\n        eps: \"application/postscript\",\n        etx: \"text/x-setext\",\n        exe: \"application/octet-stream\",\n        ez: \"application/andrew-inset\",\n        gif: \"image/gif\",\n        gram: \"application/srgs\",\n        grxml: \"application/srgs+xml\",\n        gtar: \"application/x-gtar\",\n        hdf: \"application/x-hdf\",\n        hqx: \"application/mac-binhex40\",\n        htm: \"text/html\",\n        html: \"text/html\",\n        ice: \"x-conference/x-cooltalk\",\n        ico: \"image/x-icon\",\n        ics: \"text/calendar\",\n        ief: \"image/ief\",\n        ifb: \"text/calendar\",\n        iges: \"model/iges\",\n        igs: \"model/iges\",\n        jnlp: \"application/x-java-jnlp-file\",\n        jp2: \"image/jp2\",\n        jpe: \"image/jpeg\",\n        jpeg: \"image/jpeg\",\n        jpg: \"image/jpeg\",\n        js: \"application/x-javascript\",\n        kar: \"audio/midi\",\n        latex: \"application/x-latex\",\n        lha: \"application/octet-stream\",\n        lzh: \"application/octet-stream\",\n        m3u: \"audio/x-mpegurl\",\n        m4a: \"audio/mp4a-latm\",\n        m4b: \"audio/mp4a-latm\",\n        m4p: \"audio/mp4a-latm\",\n        m4u: \"video/vnd.mpegurl\",\n        m4v: \"video/x-m4v\",\n        mac: \"image/x-macpaint\",\n        man: \"application/x-troff-man\",\n        mathml: \"application/mathml+xml\",\n        me: \"application/x-troff-me\",\n        mesh: \"model/mesh\",\n        mid: \"audio/midi\",\n        midi: \"audio/midi\",\n        mif: \"application/vnd.mif\",\n        mov: \"video/quicktime\",\n        movie: \"video/x-sgi-movie\",\n        mp2: \"audio/mpeg\",\n        mp3: \"audio/mpeg\",\n        mp4: \"video/mp4\",\n        mpe: \"video/mpeg\",\n        mpeg: \"video/mpeg\",\n        mpg: \"video/mpeg\",\n        mpga: \"audio/mpeg\",\n        ms: \"application/x-troff-ms\",\n        msh: \"model/mesh\",\n        mxu: \"video/vnd.mpegurl\",\n        nc: \"application/x-netcdf\",\n        oda: \"application/oda\",\n        ogg: \"application/ogg\",\n        pbm: \"image/x-portable-bitmap\",\n        pct: \"image/pict\",\n        pdb: \"chemical/x-pdb\",\n        pdf: \"application/pdf\",\n        pgm: \"image/x-portable-graymap\",\n        pgn: \"application/x-chess-pgn\",\n        pic: \"image/pict\",\n        pict: \"image/pict\",\n        png: \"image/png\",\n        pnm: \"image/x-portable-anymap\",\n        pnt: \"image/x-macpaint\",\n        pntg: \"image/x-macpaint\",\n        ppm: \"image/x-portable-pixmap\",\n        ppt: \"application/vnd.ms-powerpoint\",\n        pptx: \"application/vnd.openxmlformats-officedocument.presentationml.\" + \"presentation\",\n        potx: \"application/vnd.openxmlformats-officedocument.presentationml.\" + \"template\",\n        ppsx: \"application/vnd.openxmlformats-officedocument.presentationml.\" + \"slideshow\",\n        ppam: \"application/vnd.ms-powerpoint.addin.macroEnabled.12\",\n        pptm: \"application/vnd.ms-powerpoint.presentation.macroEnabled.12\",\n        potm: \"application/vnd.ms-powerpoint.template.macroEnabled.12\",\n        ppsm: \"application/vnd.ms-powerpoint.slideshow.macroEnabled.12\",\n        ps: \"application/postscript\",\n        qt: \"video/quicktime\",\n        qti: \"image/x-quicktime\",\n        qtif: \"image/x-quicktime\",\n        ra: \"audio/x-pn-realaudio\",\n        ram: \"audio/x-pn-realaudio\",\n        ras: \"image/x-cmu-raster\",\n        rdf: \"application/rdf+xml\",\n        rgb: \"image/x-rgb\",\n        rm: \"application/vnd.rn-realmedia\",\n        roff: \"application/x-troff\",\n        rtf: \"text/rtf\",\n        rtx: \"text/richtext\",\n        sgm: \"text/sgml\",\n        sgml: \"text/sgml\",\n        sh: \"application/x-sh\",\n        shar: \"application/x-shar\",\n        silo: \"model/mesh\",\n        sit: \"application/x-stuffit\",\n        skd: \"application/x-koan\",\n        skm: \"application/x-koan\",\n        skp: \"application/x-koan\",\n        skt: \"application/x-koan\",\n        smi: \"application/smil\",\n        smil: \"application/smil\",\n        snd: \"audio/basic\",\n        so: \"application/octet-stream\",\n        spl: \"application/x-futuresplash\",\n        src: \"application/x-wais-source\",\n        sv4cpio: \"application/x-sv4cpio\",\n        sv4crc: \"application/x-sv4crc\",\n        svg: \"image/svg+xml\",\n        swf: \"application/x-shockwave-flash\",\n        t: \"application/x-troff\",\n        tar: \"application/x-tar\",\n        tcl: \"application/x-tcl\",\n        tex: \"application/x-tex\",\n        texi: \"application/x-texinfo\",\n        texinfo: \"application/x-texinfo\",\n        tif: \"image/tiff\",\n        tiff: \"image/tiff\",\n        tr: \"application/x-troff\",\n        tsv: \"text/tab-separated-values\",\n        txt: \"text/plain\",\n        ustar: \"application/x-ustar\",\n        vcd: \"application/x-cdlink\",\n        vrml: \"model/vrml\",\n        vxml: \"application/voicexml+xml\",\n        wav: \"audio/x-wav\",\n        wbmp: \"image/vnd.wap.wbmp\",\n        wbmxl: \"application/vnd.wap.wbxml\",\n        wml: \"text/vnd.wap.wml\",\n        wmlc: \"application/vnd.wap.wmlc\",\n        wmls: \"text/vnd.wap.wmlscript\",\n        wmlsc: \"application/vnd.wap.wmlscriptc\",\n        wrl: \"model/vrml\",\n        xbm: \"image/x-xbitmap\",\n        xht: \"application/xhtml+xml\",\n        xhtml: \"application/xhtml+xml\",\n        xls: \"application/vnd.ms-excel\",\n        xml: \"application/xml\",\n        xpm: \"image/x-xpixmap\",\n        xsl: \"application/xml\",\n        xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n        xltx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.\" + \"template\",\n        xlsm: \"application/vnd.ms-excel.sheet.macroEnabled.12\",\n        xltm: \"application/vnd.ms-excel.template.macroEnabled.12\",\n        xlam: \"application/vnd.ms-excel.addin.macroEnabled.12\",\n        xlsb: \"application/vnd.ms-excel.sheet.binary.macroEnabled.12\",\n        xslt: \"application/xslt+xml\",\n        xul: \"application/vnd.mozilla.xul+xml\",\n        xwd: \"image/x-xwindowdump\",\n        xyz: \"chemical/x-xyz\",\n        zip: \"application/zip\"\n    };\n\n    /**\n   * Reads a File using a FileReader.\n   * @param file {File} the File to read.\n   * @param type {String} (optional) the mimetype to override with.\n   * @return {Bmob.Promise} A Promise that will be fulfilled with a\n   *     base64-encoded string of the data and its mime type.\n   */\n    var readAsync = function (file, type) {\n        var promise = new Bmob.Promise();\n\n        if (typeof (FileReader) === \"undefined\") {\n            return Bmob.Promise.error(new Bmob.Error(- 1, \"Attempted to use a FileReader on an unsupported browser.\"));\n        }\n\n        var reader = new FileReader();\n        reader.onloadend = function () {\n\n            promise.resolve(reader.result);\n        };\n        reader.readAsBinaryString(file);\n        return promise;\n    };\n\n    /**\n   *  Bmob.File 保存文件到bmob\n   * cloud.\n   * @param name {String} 文件名。在服务器中，这会改为唯一的文件名\n   * @param data {file} 文件的数据\n   *     \n   *     文件对象是在\" file upload control\"中被选中，只能在下面的浏览器使用\n   *        in Firefox 3.6+, Safari 6.0.2+, Chrome 7+, and IE 10+.\n   *        例如:<pre>\n   *     \n   * var fileUploadControl = $(\"#profilePhotoFileUpload\")[0];\n   * if (fileUploadControl.files.length > 0) {\n   *   var file = fileUploadControl.files[0];\n   *   var name = \"photo.jpg\";\n   *   var bmobFile = new Bmob.File(name, file);\n   *   bmobFile.save().then(function() {\n   *     // The file has been saved to Bmob.\n   *   }, function(error) {\n   *     // The file either could not be read, or could not be saved to Bmob.\n   *   });\n   * }</pre>\n   * @param type {String} 文件的类型.\n   */\n    Bmob.File = function (name, data, type) {\n        data = data[0];\n        this._name = name;\n        // this._name = encodeBase64(utf16to8(name));\n        var currentUser = Bmob.User.current();\n        this._metaData = {\n            owner: (currentUser != null ? currentUser.id : 'unknown')\n        };\n\n        // Guess the content type from the extension if we need to.\n        var extension = /\\.([^.]*)$/.exec(name);\n        if (extension) {\n            extension = extension[1].toLowerCase();\n        }\n        var guessedType = type || mimeTypes[extension] || \"text/plain\";\n        this._guessedType = guessedType;\n\n        if (typeof (File) !== \"undefined\" && data instanceof File) {\n            this._source = readAsync(data, type);\n        } else {\n            // throw \"Creating a Bmob.File from a String is not yet supported.\";\n            this._source = Bmob.Promise.as(data, guessedType);\n            this._metaData.size = data.length;\n        }\n    };\n\n\n\n    Bmob.File.prototype = {\n\n        /**\n     * Gets the name of the file. Before save is called, this is the filename\n     * given by the user. After save is called, that name gets prefixed with a\n     * unique identifier.\n     */\n        name: function () {\n            return this._name;\n        },\n\n        setName: function (name) {\n            this._name = name;\n        },\n\n        /**\n     * Gets the url of the file. It is only available after you save the file or\n     * after you get the file from a Bmob.Object.\n     * @return {String}\n     */\n        url: function () {\n            return this._url;\n        },\n\n        setUrl: function (url) {\n            this._url = url;\n        },\n\n        /**\n     * Gets the group of the file. It is only available after you save the file or\n     * after you get the file from a Bmob.Object.\n     * @return {String}\n     */\n        cdn: function () {\n            return this._cdn;\n        },\n\n        /**\n    * <p>Returns the file's metadata JSON object if no arguments is given.Returns the\n    * metadata value if a key is given.Set metadata value if key and value are both given.</p>\n    * <p><pre>\n    *  var metadata = file.metaData(); //Get metadata JSON object.\n    *  var size = file.metaData('size');  // Get the size metadata value.\n    *  file.metaData('format', 'jpeg'); //set metadata attribute and value.\n    *</pre></p>\n    * @return {Object} The file's metadata JSON object.\n    * @param {String} attr an optional metadata key.\n    * @param {Object} value an optional metadata value.\n    **/\n        metaData: function (attr, value) {\n            if (attr != null && value != null) {\n                this._metaData[attr] = value;\n                return this;\n            } else if (attr != null) {\n                return this._metaData[attr];\n            } else {\n                return this._metaData;\n            }\n        },\n\n        /**\n     * Destroy the file.\n     * @return {Bmob.Promise} A promise that is fulfilled when the destroy\n     *     completes.\n     */\n        destroy: function (options) {\n            if (!this._url && !this._cdn) return Bmob.Promise.error('The file url and cdn is not eixsts.')._thenRunCallbacks(options);\n\n            var data = {\n                cdn: this._cdn,\n                _ContentType: \"application/json\",\n                url: this._url,\n                metaData: self._metaData,\n            };\n            var request = Bmob._request(\"2/files\", null, null, 'DELETE', data);\n            return request._thenRunCallbacks(options);\n        },\n\n        /**\n     * Saves the file to the Bmob cloud.\n     * @param {Object} options A Backbone-style options object.\n     * @return {Bmob.Promise} Promise that is resolved when the save finishes.\n     */\n        save: function (options) {\n            var self = this;\n            if (!self._previousSave) {\n                if (self._source) {\n                    self._previousSave = self._source.then(function (base64, type) {\n                        var data = {\n                            base64: base64,\n                            // base64: encodeBase64(base64),\n                            _ContentType: \"text/plain\",\n                            mime_type: \"text/plain\",\n                            metaData: self._metaData,\n                            category: \"wechatApp\",\n                        };\n                        if (!self._metaData.size) {\n                            self._metaData.size = base64.length;\n                        }\n                        return Bmob._request(\"2/files\", self._name, null, 'POST', data);\n                    }).then(function (response) {\n\n                        self._name = response.filename;\n                        self._url = response.url;\n                        self._cdn = response.cdn;\n\n                        return self;\n                    });\n                } else {\n                    throw \"not source file\"\n                }\n            }\n            return self._previousSave._thenRunCallbacks(options);\n        }\n    };\n\n\n    /**\n   * 包含push的函数\n   * @name Bmob.Push\n   * @namespace 推送消息\n   */\n    Bmob.Files = Bmob.Files || {};\n\n\n    Bmob.Files.del = function (urls, options) {\n        var _url = urls.split(\".com\");\n        if (!_url) {\n            return Bmob.Promise.error('The file url and cdn is not eixsts.')._thenRunCallbacks(options);\n        }\n\n        var data = {\n            _ContentType: \"application/json\",\n            // url:_url,           \n        };\n        var request = Bmob._request(\"2/files/upyun\", _url[1], null, 'DELETE', data);\n        return request.then(function (resp) {\n            return Bmob._decode(null, resp);\n        })._thenRunCallbacks(options);\n    };\n\n    /**\n   * Creates a new model with defined attributes. A client id (cid) is\n   * automatically generated and assigned for you.\n   *\n   * <p>You won't normally call this method directly.  It is recommended that\n   * you use a subclass of <code>Bmob.Object</code> instead, created by calling\n   * <code>extend</code>.</p>\n   *\n   * <p>However, if you don't want to use a subclass, or aren't sure which\n   * subclass is appropriate, you can use this form:<pre>\n   *     var object = new Bmob.Object(\"ClassName\");\n   * </pre>\n   * That is basically equivalent to:<pre>\n   *     var MyClass = Bmob.Object.extend(\"ClassName\");\n   *     var object = new MyClass();\n   * </pre></p>\n   *\n   * @param {Object} attributes The initial set of data to store in the object.\n   * @param {Object} options A set of Backbone-like options for creating the\n   *     object.  The only option currently supported is \"collection\".\n   * @see Bmob.Object.extend\n   *\n   *\n   * <p>The fundamental unit of Bmob data, which implements the Backbone Model\n   * interface.</p>\n   */\n    Bmob.Object = function (attributes, options) {\n        // Allow new Bmob.Object(\"ClassName\") as a shortcut to _create.\n        if (_.isString(attributes)) {\n            return Bmob.Object._create.apply(this, arguments);\n        }\n\n        attributes = attributes || {};\n        if (options && options.parse) {\n            attributes = this.parse(attributes);\n        }\n        var defaults = Bmob._getValue(this, 'defaults');\n        if (defaults) {\n            attributes = _.extend({},\n                defaults, attributes);\n        }\n        if (options && options.collection) {\n            this.collection = options.collection;\n        }\n\n        this._serverData = {}; // The last known data for this object from cloud.\n        this._opSetQueue = [{}]; // List of sets of changes to the data.\n        this.attributes = {}; // The best estimate of this's current data.\n        this._hashedJSON = {}; // Hash of values of containers at last save.\n        this._escapedAttributes = {};\n        this.cid = _.uniqueId('c');\n        this.changed = {};\n        this._silent = {};\n        this._pending = {};\n        if (!this.set(attributes, {\n            silent: true\n        })) {\n            throw new Error(\"Can't create an invalid Bmob.Object\");\n        }\n        this.changed = {};\n        this._silent = {};\n        this._pending = {};\n        this._hasData = true;\n        this._previousAttributes = _.clone(this.attributes);\n        this.initialize.apply(this, arguments);\n    };\n\n    /**\n   * @lends Bmob.Object.prototype\n   * @property {String} id The objectId of the Bmob Object.\n   */\n\n    /**\n   * Saves the given list of Bmob.Object.\n   * If any error is encountered, stops and calls the error handler.\n   * There are two ways you can call this function.\n   *\n   * The Backbone way:<pre>\n   *   Bmob.Object.saveAll([object1, object2, ...], {\n   *     success: function(list) {\n   *       // All the objects were saved.\n   *     },\n   *     error: function(error) {\n   *       // An error occurred while saving one of the objects.\n   *     },\n   *   });\n   * </pre>\n   * A simplified syntax:<pre>\n   *   Bmob.Object.saveAll([object1, object2, ...], function(list, error) {\n   *     if (list) {\n   *       // All the objects were saved.\n   *     } else {\n   *       // An error occurred.\n   *     }\n   *   });\n   * </pre>\n   *\n   * @param {Array} list A list of <code>Bmob.Object</code>.\n   * @param {Object} options A Backbone-style callback object.\n   */\n    Bmob.Object.saveAll = function (list, options) {\n        return Bmob.Object._deepSaveAsync(list)._thenRunCallbacks(options);\n    };\n\n    // Attach all inheritable methods to the Bmob.Object prototype.\n    _.extend(Bmob.Object.prototype, Bmob.Events,\n        /** @lends Bmob.Object.prototype */\n        {\n            _existed: false,\n            _fetchWhenSave: false,\n\n            /**\n         * Initialize is an empty function by default. Override it with your own\n         * initialization logic.\n         */\n            initialize: function () { },\n\n            /**\n         * Set whether to enable fetchWhenSave option when updating object.\n         * When set true, SDK would fetch the latest object after saving.\n         * Default is false.\n         * @param {boolean} enable  true to enable fetchWhenSave option.\n         */\n            fetchWhenSave: function (enable) {\n                if (typeof enable !== 'boolean') {\n                    throw \"Expect boolean value for fetchWhenSave\";\n                }\n                this._fetchWhenSave = enable;\n            },\n\n            /**\n         * Returns a JSON version of the object suitable for saving to Bmob.\n         * @return {Object}\n         */\n            toJSON: function () {\n                var json = this._toFullJSON();\n                Bmob._arrayEach([\"__type\", \"className\"],\n                    function (key) {\n                        delete json[key];\n                    });\n                return json;\n            },\n\n            _toFullJSON: function (seenObjects) {\n                var json = _.clone(this.attributes);\n                Bmob._objectEach(json,\n                    function (val, key) {\n                        json[key] = Bmob._encode(val, seenObjects);\n                    });\n                Bmob._objectEach(this._operations,\n                    function (val, key) {\n                        json[key] = val;\n                    });\n\n                if (_.has(this, \"id\")) {\n                    json.objectId = this.id;\n                }\n                if (_.has(this, \"createdAt\")) {\n                    if (_.isDate(this.createdAt)) {\n                        json.createdAt = this.createdAt.toJSON();\n                    } else {\n                        json.createdAt = this.createdAt;\n                    }\n                }\n\n                if (_.has(this, \"updatedAt\")) {\n                    if (_.isDate(this.updatedAt)) {\n                        json.updatedAt = this.updatedAt.toJSON();\n                    } else {\n                        json.updatedAt = this.updatedAt;\n                    }\n                }\n                json.__type = \"Object\";\n                json.className = this.className;\n                return json;\n            },\n\n            /**\n         * Updates _hashedJSON to reflect the current state of this object.\n         * Adds any changed hash values to the set of pending changes.\n         */\n            _refreshCache: function () {\n                var self = this;\n                if (self._refreshingCache) {\n                    return;\n                }\n                self._refreshingCache = true;\n                Bmob._objectEach(this.attributes,\n                    function (value, key) {\n                        if (value instanceof Bmob.Object) {\n                            value._refreshCache();\n                        } else if (_.isObject(value)) {\n                            if (self._resetCacheForKey(key)) {\n                                self.set(key, new Bmob.Op.Set(value), {\n                                    silent: true\n                                });\n                            }\n                        }\n                    });\n                delete self._refreshingCache;\n            },\n\n            /**\n         * Returns true if this object has been modified since its last\n         * save/refresh.  If an attribute is specified, it returns true only if that\n         * particular attribute has been modified since the last save/refresh.\n         * @param {String} attr An attribute name (optional).\n         * @return {Boolean}\n         */\n            dirty: function (attr) {\n                this._refreshCache();\n\n                var currentChanges = _.last(this._opSetQueue);\n\n                if (attr) {\n                    return (currentChanges[attr] ? true : false);\n                }\n                if (!this.id) {\n                    return true;\n                }\n                if (_.keys(currentChanges).length > 0) {\n                    return true;\n                }\n                return false;\n            },\n\n            /**\n         * Gets a Pointer referencing this Object.\n         */\n            _toPointer: function () {\n                // if (!this.id) {\n                //   throw new Error(\"Can't serialize an unsaved Bmob.Object\");\n                // }\n                return {\n                    __type: \"Pointer\",\n                    className: this.className,\n                    objectId: this.id\n                };\n            },\n\n            /**\n         * Gets the value of an attribute.\n         * @param {String} attr The string name of an attribute.\n         */\n            get: function (attr) {\n                return this.attributes[attr];\n            },\n\n            /**\n         * Gets a relation on the given class for the attribute.\n         * @param String attr The attribute to get the relation for.\n         */\n            relation: function (attr) {\n                var value = this.get(attr);\n                if (value) {\n                    if (!(value instanceof Bmob.Relation)) {\n                        throw \"Called relation() on non-relation field \" + attr;\n                    }\n                    value._ensureParentAndKey(this, attr);\n                    return value;\n                } else {\n                    return new Bmob.Relation(this, attr);\n                }\n            },\n\n            /**\n         * Gets the HTML-escaped value of an attribute.\n         */\n            escape: function (attr) {\n                var html = this._escapedAttributes[attr];\n                if (html) {\n                    return html;\n                }\n                var val = this.attributes[attr];\n                var escaped;\n                if (Bmob._isNullOrUndefined(val)) {\n                    escaped = '';\n                } else {\n                    escaped = _.escape(val.toString());\n                }\n                this._escapedAttributes[attr] = escaped;\n                return escaped;\n            },\n\n            /**\n         * Returns <code>true</code> if the attribute contains a value that is not\n         * null or undefined.\n         * @param {String} attr The string name of the attribute.\n         * @return {Boolean}\n         */\n            has: function (attr) {\n                return !Bmob._isNullOrUndefined(this.attributes[attr]);\n            },\n\n            /**\n         * Pulls \"special\" fields like objectId, createdAt, etc. out of attrs\n         * and puts them on \"this\" directly.  Removes them from attrs.\n         * @param attrs - A dictionary with the data for this Bmob.Object.\n         */\n            _mergeMagicFields: function (attrs) {\n                // Check for changes of magic fields.\n                var model = this;\n                var specialFields = [\"id\", \"objectId\", \"createdAt\", \"updatedAt\"];\n                Bmob._arrayEach(specialFields,\n                    function (attr) {\n                        if (attrs[attr]) {\n                            if (attr === \"objectId\") {\n                                model.id = attrs[attr];\n                            } else {\n                                model[attr] = attrs[attr];\n                            }\n                            delete attrs[attr];\n                        }\n                    });\n            },\n\n            /**\n         * Returns the json to be sent to the server.\n         */\n            _startSave: function () {\n                this._opSetQueue.push({});\n            },\n\n            /**\n         * Called when a save fails because of an error. Any changes that were part\n         * of the save need to be merged with changes made after the save. This\n         * might throw an exception is you do conflicting operations. For example,\n         * if you do:\n         *   object.set(\"foo\", \"bar\");\n         *   object.set(\"invalid field name\", \"baz\");\n         *   object.save();\n         *   object.increment(\"foo\");\n         * then this will throw when the save fails and the client tries to merge\n         * \"bar\" with the +1.\n         */\n            _cancelSave: function () {\n                var self = this;\n                var failedChanges = _.first(this._opSetQueue);\n                this._opSetQueue = _.rest(this._opSetQueue);\n                var nextChanges = _.first(this._opSetQueue);\n                Bmob._objectEach(failedChanges,\n                    function (op, key) {\n                        var op1 = failedChanges[key];\n                        var op2 = nextChanges[key];\n                        if (op1 && op2) {\n                            nextChanges[key] = op2._mergeWithPrevious(op1);\n                        } else if (op1) {\n                            nextChanges[key] = op1;\n                        }\n                    });\n                this._saving = this._saving - 1;\n            },\n\n            /**\n         * Called when a save completes successfully. This merges the changes that\n         * were saved into the known server data, and overrides it with any data\n         * sent directly from the server.\n         */\n            _finishSave: function (serverData) {\n                // Grab a copy of any object referenced by this object. These instances\n                // may have already been fetched, and we don't want to lose their data.\n                // Note that doing it like this means we will unify separate copies of the\n                // same object, but that's a risk we have to take.\n                var fetchedObjects = {};\n                Bmob._traverse(this.attributes,\n                    function (object) {\n                        if (object instanceof Bmob.Object && object.id && object._hasData) {\n                            fetchedObjects[object.id] = object;\n                        }\n                    });\n\n                var savedChanges = _.first(this._opSetQueue);\n                this._opSetQueue = _.rest(this._opSetQueue);\n                this._applyOpSet(savedChanges, this._serverData);\n                this._mergeMagicFields(serverData);\n                var self = this;\n                Bmob._objectEach(serverData,\n                    function (value, key) {\n                        self._serverData[key] = Bmob._decode(key, value);\n\n                        // Look for any objects that might have become unfetched and fix them\n                        // by replacing their values with the previously observed values.\n                        var fetched = Bmob._traverse(self._serverData[key],\n                            function (object) {\n                                if (object instanceof Bmob.Object && fetchedObjects[object.id]) {\n                                    return fetchedObjects[object.id];\n                                }\n                            });\n                        if (fetched) {\n                            self._serverData[key] = fetched;\n                        }\n                    });\n                this._rebuildAllEstimatedData();\n                this._saving = this._saving - 1;\n            },\n\n            /**\n         * Called when a fetch or login is complete to set the known server data to\n         * the given object.\n         */\n            _finishFetch: function (serverData, hasData) {\n                // Clear out any changes the user might have made previously.\n                this._opSetQueue = [{}];\n\n                // Bring in all the new server data.\n                this._mergeMagicFields(serverData);\n                var self = this;\n                Bmob._objectEach(serverData,\n                    function (value, key) {\n                        self._serverData[key] = Bmob._decode(key, value);\n                    });\n\n                // Refresh the attributes.\n                this._rebuildAllEstimatedData();\n\n                // Clear out the cache of mutable containers.\n                this._refreshCache();\n                this._opSetQueue = [{}];\n\n                this._hasData = hasData;\n            },\n\n            /**\n         * Applies the set of Bmob.Op in opSet to the object target.\n         */\n            _applyOpSet: function (opSet, target) {\n                var self = this;\n                Bmob._objectEach(opSet,\n                    function (change, key) {\n                        target[key] = change._estimate(target[key], self, key);\n                        if (target[key] === Bmob.Op._UNSET) {\n                            delete target[key];\n                        }\n                    });\n            },\n\n            /**\n         * Replaces the cached value for key with the current value.\n         * Returns true if the new value is different than the old value.\n         */\n            _resetCacheForKey: function (key) {\n                var value = this.attributes[key];\n                if (_.isObject(value) && !(value instanceof Bmob.Object) && !(value instanceof Bmob.File)) {\n                    value = value.toJSON ? value.toJSON() : value;\n                    var json = JSON.stringify(value);\n                    if (this._hashedJSON[key] !== json) {\n                        this._hashedJSON[key] = json;\n                        return true;\n                    }\n                }\n                return false;\n            },\n\n            /**\n         * Populates attributes[key] by starting with the last known data from the\n         * server, and applying all of the local changes that have been made to that\n         * key since then.\n         */\n            _rebuildEstimatedDataForKey: function (key) {\n                var self = this;\n                delete this.attributes[key];\n                if (this._serverData[key]) {\n                    this.attributes[key] = this._serverData[key];\n                }\n                Bmob._arrayEach(this._opSetQueue,\n                    function (opSet) {\n                        var op = opSet[key];\n                        if (op) {\n                            self.attributes[key] = op._estimate(self.attributes[key], self, key);\n                            if (self.attributes[key] === Bmob.Op._UNSET) {\n                                delete self.attributes[key];\n                            } else {\n                                self._resetCacheForKey(key);\n                            }\n                        }\n                    });\n            },\n\n            /**\n         * Populates attributes by starting with the last known data from the\n         * server, and applying all of the local changes that have been made since\n         * then.\n         */\n            _rebuildAllEstimatedData: function () {\n                var self = this;\n\n                var previousAttributes = _.clone(this.attributes);\n\n                this.attributes = _.clone(this._serverData);\n                Bmob._arrayEach(this._opSetQueue,\n                    function (opSet) {\n                        self._applyOpSet(opSet, self.attributes);\n                        Bmob._objectEach(opSet,\n                            function (op, key) {\n                                self._resetCacheForKey(key);\n                            });\n                    });\n\n                // Trigger change events for anything that changed because of the fetch.\n                Bmob._objectEach(previousAttributes,\n                    function (oldValue, key) {\n                        if (self.attributes[key] !== oldValue) {\n                            self.trigger('change:' + key, self, self.attributes[key], {});\n                        }\n                    });\n                Bmob._objectEach(this.attributes,\n                    function (newValue, key) {\n                        if (!_.has(previousAttributes, key)) {\n                            self.trigger('change:' + key, self, newValue, {});\n                        }\n                    });\n            },\n\n            /**\n         * Sets a hash of model attributes on the object, firing\n         * <code>\"change\"</code> unless you choose to silence it.\n         *\n         * <p>You can call it with an object containing keys and values, or with one\n         * key and value.  For example:<pre>\n         *   gameTurn.set({\n         *     player: player1,\n         *     diceRoll: 2\n         *   }, {\n         *     error: function(gameTurnAgain, error) {\n         *       // The set failed validation.\n         *     }\n         *   });\n         *\n         *   game.set(\"currentPlayer\", player2, {\n         *     error: function(gameTurnAgain, error) {\n         *       // The set failed validation.\n         *     }\n         *   });\n         *\n         *   game.set(\"finished\", true);</pre></p>\n         *\n         * @param {String} key The key to set.\n         * @param {} value The value to give it.\n         * @param {Object} options A set of Backbone-like options for the set.\n         *     The only supported options are <code>silent</code>,\n         *     <code>error</code>, and <code>promise</code>.\n         * @return {Boolean} true if the set succeeded.\n         * @see Bmob.Object#validate\n         * @see Bmob.Error\n         */\n            set: function (key, value, options) {\n                var attrs, attr;\n                if (_.isObject(key) || Bmob._isNullOrUndefined(key)) {\n                    attrs = key;\n                    Bmob._objectEach(attrs,\n                        function (v, k) {\n                            attrs[k] = Bmob._decode(k, v);\n                        });\n                    options = value;\n                } else {\n                    attrs = {};\n                    attrs[key] = Bmob._decode(key, value);\n                }\n\n                // Extract attributes and options.\n                options = options || {};\n                if (!attrs) {\n                    return this;\n                }\n                if (attrs instanceof Bmob.Object) {\n                    attrs = attrs.attributes;\n                }\n\n                // If the unset option is used, every attribute should be a Unset.\n                if (options.unset) {\n                    Bmob._objectEach(attrs,\n                        function (unused_value, key) {\n                            attrs[key] = new Bmob.Op.Unset();\n                        });\n                }\n\n                // Apply all the attributes to get the estimated values.\n                var dataToValidate = _.clone(attrs);\n                var self = this;\n                Bmob._objectEach(dataToValidate,\n                    function (value, key) {\n                        if (value instanceof Bmob.Op) {\n                            dataToValidate[key] = value._estimate(self.attributes[key], self, key);\n                            if (dataToValidate[key] === Bmob.Op._UNSET) {\n                                delete dataToValidate[key];\n                            }\n                        }\n                    });\n\n                // Run validation.\n                if (!this._validate(attrs, options)) {\n                    return false;\n                }\n\n                this._mergeMagicFields(attrs);\n\n                options.changes = {};\n                var escaped = this._escapedAttributes;\n                var prev = this._previousAttributes || {};\n\n                // Update attributes.\n                Bmob._arrayEach(_.keys(attrs),\n                    function (attr) {\n                        var val = attrs[attr];\n\n                        // If this is a relation object we need to set the parent correctly,\n                        // since the location where it was parsed does not have access to\n                        // this object.\n                        if (val instanceof Bmob.Relation) {\n                            val.parent = self;\n                        }\n\n                        if (!(val instanceof Bmob.Op)) {\n                            val = new Bmob.Op.Set(val);\n                        }\n\n                        // See if this change will actually have any effect.\n                        var isRealChange = true;\n                        if (val instanceof Bmob.Op.Set && _.isEqual(self.attributes[attr], val.value)) {\n                            isRealChange = false;\n                        }\n\n                        if (isRealChange) {\n                            delete escaped[attr];\n                            if (options.silent) {\n                                self._silent[attr] = true;\n                            } else {\n                                options.changes[attr] = true;\n                            }\n                        }\n\n                        var currentChanges = _.last(self._opSetQueue);\n                        currentChanges[attr] = val._mergeWithPrevious(currentChanges[attr]);\n                        self._rebuildEstimatedDataForKey(attr);\n\n                        if (isRealChange) {\n                            self.changed[attr] = self.attributes[attr];\n                            if (!options.silent) {\n                                self._pending[attr] = true;\n                            }\n                        } else {\n                            delete self.changed[attr];\n                            delete self._pending[attr];\n                        }\n                    });\n\n                if (!options.silent) {\n                    this.change(options);\n                }\n                return this;\n            },\n\n            /**\n         * Remove an attribute from the model, firing <code>\"change\"</code> unless\n         * you choose to silence it. This is a noop if the attribute doesn't\n         * exist.\n         */\n            unset: function (attr, options) {\n                options = options || {};\n                options.unset = true;\n                return this.set(attr, null, options);\n            },\n\n            /**\n         * Atomically increments the value of the given attribute the next time the\n         * object is saved. If no amount is specified, 1 is used by default.\n         *\n         * @param attr {String} The key.\n         * @param amount {Number} The amount to increment by.\n         */\n            increment: function (attr, amount) {\n                if (_.isUndefined(amount) || _.isNull(amount)) {\n                    amount = 1;\n                }\n                return this.set(attr, new Bmob.Op.Increment(amount));\n            },\n\n            /**\n         * Atomically add an object to the end of the array associated with a given\n         * key.\n         * @param attr {String} The key.\n         * @param item {} The item to add.\n         */\n            add: function (attr, item) {\n                return this.set(attr, new Bmob.Op.Add([item]));\n            },\n\n            /**\n         * Atomically add an object to the array associated with a given key, only\n         * if it is not already present in the array. The position of the insert is\n         * not guaranteed.\n         *\n         * @param attr {String} The key.\n         * @param item {} The object to add.\n         */\n            addUnique: function (attr, item) {\n                return this.set(attr, new Bmob.Op.AddUnique([item]));\n            },\n\n            /**\n         * Atomically remove all instances of an object from the array associated\n         * with a given key.\n         *\n         * @param attr {String} The key.\n         * @param item {} The object to remove.\n         */\n            remove: function (attr, item) {\n                return this.set(attr, new Bmob.Op.Remove([item]));\n            },\n\n            /**\n         * Returns an instance of a subclass of Bmob.Op describing what kind of\n         * modification has been performed on this field since the last time it was\n         * saved. For example, after calling object.increment(\"x\"), calling\n         * object.op(\"x\") would return an instance of Bmob.Op.Increment.\n         *\n         * @param attr {String} The key.\n         * @returns {Bmob.Op} The operation, or undefined if none.\n         */\n            op: function (attr) {\n                return _.last(this._opSetQueue)[attr];\n            },\n\n            /**\n         * Clear all attributes on the model, firing <code>\"change\"</code> unless\n         * you choose to silence it.\n         */\n            clear: function (options) {\n                options = options || {};\n                options.unset = true;\n                var keysToClear = _.extend(this.attributes, this._operations);\n                return this.set(keysToClear, options);\n            },\n\n            /**\n         * Returns a JSON-encoded set of operations to be sent with the next save\n         * request.\n         */\n            _getSaveJSON: function () {\n                var json = _.clone(_.first(this._opSetQueue));\n                Bmob._objectEach(json,\n                    function (op, key) {\n                        json[key] = op.toJSON();\n                    });\n                return json;\n            },\n\n            /**\n         * Returns true if this object can be serialized for saving.\n         */\n            _canBeSerialized: function () {\n                return Bmob.Object._canBeSerializedAsValue(this.attributes);\n            },\n\n            /**\n         * Fetch the model from the server. If the server's representation of the\n         * model differs from its current attributes, they will be overriden,\n         * triggering a <code>\"change\"</code> event.\n         * @return {Bmob.Promise} A promise that is fulfilled when the fetch\n         *     completes.\n         */\n            fetch: function (options) {\n                var self = this;\n                var request = Bmob._request(\"classes\", this.className, this.id, 'GET');\n                return request.then(function (response, status, xhr) {\n                    self._finishFetch(self.parse(response, status, xhr), true);\n                    return self;\n                })._thenRunCallbacks(options, this);\n            },\n\n            /**\n         * Set a hash of model attributes, and save the model to the server.\n         * updatedAt will be updated when the request returns.\n         * You can either call it as:<pre>\n         *   object.save();</pre>\n         * or<pre>\n         *   object.save(null, options);</pre>\n         * or<pre>\n         *   object.save(attrs, options);</pre>\n         * or<pre>\n         *   object.save(key, value, options);</pre>\n         *\n         * For example, <pre>\n         *   gameTurn.save({\n         *     player: \"Jake Cutter\",\n         *     diceRoll: 2\n         *   }, {\n         *     success: function(gameTurnAgain) {\n         *       // The save was successful.\n         *     },\n         *     error: function(gameTurnAgain, error) {\n         *       // The save failed.  Error is an instance of Bmob.Error.\n         *     }\n         *   });</pre>\n         * or with promises:<pre>\n         *   gameTurn.save({\n         *     player: \"Jake Cutter\",\n         *     diceRoll: 2\n         *   }).then(function(gameTurnAgain) {\n         *     // The save was successful.\n         *   }, function(error) {\n         *     // The save failed.  Error is an instance of Bmob.Error.\n         *   });</pre>\n         *\n         * @return {Bmob.Promise} A promise that is fulfilled when the save\n         *     completes.\n         * @see Bmob.Error\n         */\n            save: function (arg1, arg2, arg3) {\n                var i, attrs, current, options, saved;\n                if (_.isObject(arg1) || Bmob._isNullOrUndefined(arg1)) {\n                    attrs = arg1;\n                    options = arg2;\n                } else {\n                    attrs = {};\n                    attrs[arg1] = arg2;\n                    options = arg3;\n                }\n\n                // Make save({ success: function() {} }) work.\n                if (!options && attrs) {\n                    var extra_keys = _.reject(attrs,\n                        function (value, key) {\n                            return _.include([\"success\", \"error\", \"wait\"], key);\n                        });\n                    if (extra_keys.length === 0) {\n                        var all_functions = true;\n                        if (_.has(attrs, \"success\") && !_.isFunction(attrs.success)) {\n                            all_functions = false;\n                        }\n                        if (_.has(attrs, \"error\") && !_.isFunction(attrs.error)) {\n                            all_functions = false;\n                        }\n                        if (all_functions) {\n                            // This attrs object looks like it's really an options object,\n                            // and there's no other options object, so let's just use it.\n                            return this.save(null, attrs);\n                        }\n                    }\n                }\n\n                options = _.clone(options) || {};\n                if (options.wait) {\n                    current = _.clone(this.attributes);\n                }\n\n                var setOptions = _.clone(options) || {};\n                if (setOptions.wait) {\n                    setOptions.silent = true;\n                }\n                var setError;\n                setOptions.error = function (model, error) {\n                    setError = error;\n                };\n                if (attrs && !this.set(attrs, setOptions)) {\n                    return Bmob.Promise.error(setError)._thenRunCallbacks(options, this);\n                }\n\n                var model = this;\n\n                // If there is any unsaved child, save it first.\n                model._refreshCache();\n\n                var unsavedChildren = [];\n                var unsavedFiles = [];\n                Bmob.Object._findUnsavedChildren(model.attributes, unsavedChildren, unsavedFiles);\n                if (unsavedChildren.length + unsavedFiles.length > 0) {\n                    return Bmob.Object._deepSaveAsync(this.attributes).then(function () {\n                        return model.save(null, options);\n                    },\n                        function (error) {\n                            return Bmob.Promise.error(error)._thenRunCallbacks(options, model);\n                        });\n                }\n\n                this._startSave();\n                this._saving = (this._saving || 0) + 1;\n\n                this._allPreviousSaves = this._allPreviousSaves || Bmob.Promise.as();\n                this._allPreviousSaves = this._allPreviousSaves._continueWith(function () {\n                    var method = model.id ? 'PUT' : 'POST';\n\n                    var json = model._getSaveJSON();\n\n                    if (method === 'PUT' && model._fetchWhenSave) {\n                        //Sepcial-case fetchWhenSave when updating object.\n                        json._fetchWhenSave = true;\n                    }\n\n                    var route = \"classes\";\n                    var className = model.className;\n                    if (model.className === \"_User\" && !model.id) {\n                        // Special-case user sign-up.\n                        route = \"users\";\n                        className = null;\n                    }\n                    var request = Bmob._request(route, className, model.id, method, json);\n\n                    request = request.then(function (resp, status, xhr) {\n                        var serverAttrs = model.parse(resp, status, xhr);\n                        if (options.wait) {\n                            serverAttrs = _.extend(attrs || {},\n                                serverAttrs);\n                        }\n                        model._finishSave(serverAttrs);\n                        if (options.wait) {\n                            model.set(current, setOptions);\n                        }\n                        return model;\n\n                    },\n                        function (error) {\n                            model._cancelSave();\n                            return Bmob.Promise.error(error);\n\n                        })._thenRunCallbacks(options, model);\n\n                    return request;\n                });\n                return this._allPreviousSaves;\n            },\n\n            /**\n         * Destroy this model on the server if it was already persisted.\n         * Optimistically removes the model from its collection, if it has one.\n         * If `wait: true` is passed, waits for the server to respond\n         * before removal.\n         *\n         * @return {Bmob.Promise} A promise that is fulfilled when the destroy\n         *     completes.\n         */\n            destroy: function (options) {\n                options = options || {};\n                var model = this;\n\n                var triggerDestroy = function () {\n                    model.trigger('destroy', model, model.collection, options);\n                };\n\n                if (!this.id) {\n                    return triggerDestroy();\n                }\n\n                if (!options.wait) {\n                    triggerDestroy();\n                }\n\n                var request = Bmob._request(\"classes\", this.className, this.id, 'DELETE');\n                return request.then(function () {\n                    if (options.wait) {\n                        triggerDestroy();\n                    }\n                    return model;\n                })._thenRunCallbacks(options, this);\n            },\n\n            /**\n         * Converts a response into the hash of attributes to be set on the model.\n         * @ignore\n         */\n            parse: function (resp, status, xhr) {\n                var output = _.clone(resp);\n                _([\"createdAt\", \"updatedAt\"]).each(function (key) {\n                    if (output[key]) {\n                        output[key] = output[key];\n                    }\n                });\n                if (!output.updatedAt) {\n                    output.updatedAt = output.createdAt;\n                }\n                if (status) {\n                    this._existed = (status !== 201);\n                }\n                return output;\n            },\n\n            /**\n         * Creates a new model with identical attributes to this one.\n         * @return {Bmob.Object}\n         */\n            clone: function () {\n                return new this.constructor(this.attributes);\n            },\n\n            /**\n         * Returns true if this object has never been saved to Bmob.\n         * @return {Boolean}\n         */\n            isNew: function () {\n                return !this.id;\n            },\n\n            /**\n         * Call this method to manually fire a `\"change\"` event for this model and\n         * a `\"change:attribute\"` event for each changed attribute.\n         * Calling this will cause all objects observing the model to update.\n         */\n            change: function (options) {\n                options = options || {};\n                var changing = this._changing;\n                this._changing = true;\n\n                // Silent changes become pending changes.\n                var self = this;\n                Bmob._objectEach(this._silent,\n                    function (attr) {\n                        self._pending[attr] = true;\n                    });\n\n                // Silent changes are triggered.\n                var changes = _.extend({},\n                    options.changes, this._silent);\n                this._silent = {};\n                Bmob._objectEach(changes,\n                    function (unused_value, attr) {\n                        self.trigger('change:' + attr, self, self.get(attr), options);\n                    });\n                if (changing) {\n                    return this;\n                }\n\n                // This is to get around lint not letting us make a function in a loop.\n                var deleteChanged = function (value, attr) {\n                    if (!self._pending[attr] && !self._silent[attr]) {\n                        delete self.changed[attr];\n                    }\n                };\n\n                // Continue firing `\"change\"` events while there are pending changes.\n                while (!_.isEmpty(this._pending)) {\n                    this._pending = {};\n                    this.trigger('change', this, options);\n                    // Pending and silent changes still remain.\n                    Bmob._objectEach(this.changed, deleteChanged);\n                    self._previousAttributes = _.clone(this.attributes);\n                }\n\n                this._changing = false;\n                return this;\n            },\n\n            /**\n         * Returns true if this object was created by the Bmob server when the\n         * object might have already been there (e.g. in the case of a Facebook\n         * login)\n         */\n            existed: function () {\n                return this._existed;\n            },\n\n            /**\n         * Determine if the model has changed since the last <code>\"change\"</code>\n         * event.  If you specify an attribute name, determine if that attribute\n         * has changed.\n         * @param {String} attr Optional attribute name\n         * @return {Boolean}\n         */\n            hasChanged: function (attr) {\n                if (!arguments.length) {\n                    return !_.isEmpty(this.changed);\n                }\n                return this.changed && _.has(this.changed, attr);\n            },\n\n            /**\n         * Returns an object containing all the attributes that have changed, or\n         * false if there are no changed attributes. Useful for determining what\n         * parts of a view need to be updated and/or what attributes need to be\n         * persisted to the server. Unset attributes will be set to undefined.\n         * You can also pass an attributes object to diff against the model,\n         * determining if there *would be* a change.\n         */\n            changedAttributes: function (diff) {\n                if (!diff) {\n                    return this.hasChanged() ? _.clone(this.changed) : false;\n                }\n                var changed = {};\n                var old = this._previousAttributes;\n                Bmob._objectEach(diff,\n                    function (diffVal, attr) {\n                        if (!_.isEqual(old[attr], diffVal)) {\n                            changed[attr] = diffVal;\n                        }\n                    });\n                return changed;\n            },\n\n            /**\n         * Gets the previous value of an attribute, recorded at the time the last\n         * <code>\"change\"</code> event was fired.\n         * @param {String} attr Name of the attribute to get.\n         */\n            previous: function (attr) {\n                if (!arguments.length || !this._previousAttributes) {\n                    return null;\n                }\n                return this._previousAttributes[attr];\n            },\n\n            /**\n         * Gets all of the attributes of the model at the time of the previous\n         * <code>\"change\"</code> event.\n         * @return {Object}\n         */\n            previousAttributes: function () {\n                return _.clone(this._previousAttributes);\n            },\n\n            /**\n         * Checks if the model is currently in a valid state. It's only possible to\n         * get into an *invalid* state if you're using silent changes.\n         * @return {Boolean}\n         */\n            isValid: function () {\n                return !this.validate(this.attributes);\n            },\n\n            /**\n         * You should not call this function directly unless you subclass\n         * <code>Bmob.Object</code>, in which case you can override this method\n         * to provide additional validation on <code>set</code> and\n         * <code>save</code>.  Your implementation should return\n         *\n         * @param {Object} attrs The current data to validate.\n         * @param {Object} options A Backbone-like options object.\n         * @return {} False if the data is valid.  An error object otherwise.\n         * @see Bmob.Object#set\n         */\n            validate: function (attrs, options) {\n                if (_.has(attrs, \"ACL\") && !(attrs.ACL instanceof Bmob.ACL)) {\n                    return new Bmob.Error(Bmob.Error.OTHER_CAUSE, \"ACL must be a Bmob.ACL.\");\n                }\n                return false;\n            },\n\n            /**\n         * Run validation against a set of incoming attributes, returning `true`\n         * if all is well. If a specific `error` callback has been passed,\n         * call that instead of firing the general `\"error\"` event.\n         */\n            _validate: function (attrs, options) {\n                if (options.silent || !this.validate) {\n                    return true;\n                }\n                attrs = _.extend({},\n                    this.attributes, attrs);\n                var error = this.validate(attrs, options);\n                if (!error) {\n                    return true;\n                }\n                if (options && options.error) {\n                    options.error(this, error, options);\n                } else {\n                    this.trigger('error', this, error, options);\n                }\n                return false;\n            },\n\n            /**\n         * Returns the ACL for this object.\n         * @returns {Bmob.ACL} An instance of Bmob.ACL.\n         * @see Bmob.Object#get\n         */\n            getACL: function () {\n                return this.get(\"ACL\");\n            },\n\n            /**\n         * Sets the ACL to be used for this object.\n         * @param {Bmob.ACL} acl An instance of Bmob.ACL.\n         * @param {Object} options Optional Backbone-like options object to be\n         *     passed in to set.\n         * @return {Boolean} Whether the set passed validation.\n         * @see Bmob.Object#set\n         */\n            setACL: function (acl, options) {\n                return this.set(\"ACL\", acl, options);\n            }\n\n        });\n\n    /**\n    * Creates an instance of a subclass of Bmob.Object for the give classname\n    * and id.\n    * @param  {String} className The name of the Bmob class backing this model.\n    * @param {String} id The object id of this model.\n    * @return {Bmob.Object} A new subclass instance of Bmob.Object.\n    */\n    Bmob.Object.createWithoutData = function (className, id, hasData) {\n        var result = new Bmob.Object(className);\n        result.id = id;\n        result._hasData = hasData;\n        return result;\n    };\n    /**\n    * Delete objects in batch.The objects className must be the same.\n    * @param {Array} The ParseObject array to be deleted.\n    * @param {Object} options Standard options object with success and error\n    *     callbacks.\n    * @return {Bmob.Promise} A promise that is fulfilled when the save\n    *     completes.\n    */\n    Bmob.Object.destroyAll = function (objects, options) {\n        if (objects == null || objects.length == 0) {\n            return Bmob.Promise.as()._thenRunCallbacks(options);\n        }\n        var className = objects[0].className;\n        var id = \"\";\n        var wasFirst = true;\n        objects.forEach(function (obj) {\n            if (obj.className != className) throw \"Bmob.Object.destroyAll requires the argument object array's classNames must be the same\";\n            if (!obj.id) throw \"Could not delete unsaved object\";\n            if (wasFirst) {\n                id = obj.id;\n                wasFirst = false;\n            } else {\n                id = id + ',' + obj.id;\n            }\n        });\n        var request = Bmob._request(\"classes\", className, id, 'DELETE');\n        return request._thenRunCallbacks(options);\n    };\n\n    /**\n   * Returns the appropriate subclass for making new instances of the given\n   * className string.\n   */\n    Bmob.Object._getSubclass = function (className) {\n        if (!_.isString(className)) {\n            throw \"Bmob.Object._getSubclass requires a string argument.\";\n        }\n        var ObjectClass = Bmob.Object._classMap[className];\n        if (!ObjectClass) {\n            ObjectClass = Bmob.Object.extend(className);\n            Bmob.Object._classMap[className] = ObjectClass;\n        }\n        return ObjectClass;\n    };\n\n    /**\n   * Creates an instance of a subclass of Bmob.Object for the given classname.\n   */\n    Bmob.Object._create = function (className, attributes, options) {\n        var ObjectClass = Bmob.Object._getSubclass(className);\n        return new ObjectClass(attributes, options);\n    };\n\n    // Set up a map of className to class so that we can create new instances of\n    // Bmob Objects from JSON automatically.\n    Bmob.Object._classMap = {};\n\n    Bmob.Object._extend = Bmob._extend;\n\n    /**\n   * Creates a new subclass of Bmob.Object for the given Bmob class name.\n   *\n   * <p>Every extension of a Bmob class will inherit from the most recent\n   * previous extension of that class. When a Bmob.Object is automatically\n   * created by parsing JSON, it will use the most recent extension of that\n   * class.</p>\n   *\n   * <p>You should call either:<pre>\n   *     var MyClass = Bmob.Object.extend(\"MyClass\", {\n   *         <i>Instance properties</i>\n   *     }, {\n   *         <i>Class properties</i>\n   *     });</pre>\n   * or, for Backbone compatibility:<pre>\n   *     var MyClass = Bmob.Object.extend({\n   *         className: \"MyClass\",\n   *         <i>Other instance properties</i>\n   *     }, {\n   *         <i>Class properties</i>\n   *     });</pre></p>\n   *\n   * @param {String} className The name of the Bmob class backing this model.\n   * @param {Object} protoProps Instance properties to add to instances of the\n   *     class returned from this method.\n   * @param {Object} classProps Class properties to add the class returned from\n   *     this method.\n   * @return {Class} A new subclass of Bmob.Object.\n   */\n    Bmob.Object.extend = function (className, protoProps, classProps) {\n        // Handle the case with only two args.\n        if (!_.isString(className)) {\n            if (className && _.has(className, \"className\")) {\n                return Bmob.Object.extend(className.className, className, protoProps);\n            } else {\n                throw new Error(\"Bmob.Object.extend's first argument should be the className.\");\n            }\n        }\n\n        // If someone tries to subclass \"User\", coerce it to the right type.\n        if (className === \"User\") {\n            className = \"_User\";\n        }\n\n        var NewClassObject = null;\n        if (_.has(Bmob.Object._classMap, className)) {\n            var OldClassObject = Bmob.Object._classMap[className];\n            // This new subclass has been told to extend both from \"this\" and from\n            // OldClassObject. This is multiple inheritance, which isn't supported.\n            // For now, let's just pick one.\n            NewClassObject = OldClassObject._extend(protoProps, classProps);\n        } else {\n            protoProps = protoProps || {};\n            protoProps.className = className;\n            NewClassObject = this._extend(protoProps, classProps);\n        }\n        // Extending a subclass should reuse the classname automatically.\n        NewClassObject.extend = function (arg0) {\n            if (_.isString(arg0) || (arg0 && _.has(arg0, \"className\"))) {\n                return Bmob.Object.extend.apply(NewClassObject, arguments);\n            }\n            var newArguments = [className].concat(Bmob._.toArray(arguments));\n            return Bmob.Object.extend.apply(NewClassObject, newArguments);\n        };\n        Bmob.Object._classMap[className] = NewClassObject;\n        return NewClassObject;\n    };\n\n    Bmob.Object._findUnsavedChildren = function (object, children, files) {\n        Bmob._traverse(object,\n            function (object) {\n                if (object instanceof Bmob.Object) {\n                    object._refreshCache();\n                    if (object.dirty()) {\n                        children.push(object);\n                    }\n                    return;\n                }\n\n                if (object instanceof Bmob.File) {\n                    if (!object.url()) {\n                        files.push(object);\n                    }\n                    return;\n                }\n\n            });\n    };\n\n    Bmob.Object._canBeSerializedAsValue = function (object) {\n        var canBeSerializedAsValue = true;\n\n        if (object instanceof Bmob.Object) {\n            canBeSerializedAsValue = !!object.id;\n\n        } else if (_.isArray(object)) {\n            Bmob._arrayEach(object,\n                function (child) {\n                    if (!Bmob.Object._canBeSerializedAsValue(child)) {\n                        canBeSerializedAsValue = false;\n                    }\n                });\n\n        } else if (_.isObject(object)) {\n            Bmob._objectEach(object,\n                function (child) {\n                    if (!Bmob.Object._canBeSerializedAsValue(child)) {\n                        canBeSerializedAsValue = false;\n                    }\n                });\n        }\n\n        return canBeSerializedAsValue;\n    };\n\n    Bmob.Object._deepSaveAsync = function (object) {\n        var unsavedChildren = [];\n        var unsavedFiles = [];\n        Bmob.Object._findUnsavedChildren(object, unsavedChildren, unsavedFiles);\n\n        var promise = Bmob.Promise.as();\n        _.each(unsavedFiles,\n            function (file) {\n                promise = promise.then(function () {\n                    return file.save();\n                });\n            });\n\n        var objects = _.uniq(unsavedChildren);\n        var remaining = _.uniq(objects);\n\n        return promise.then(function () {\n            return Bmob.Promise._continueWhile(function () {\n                return remaining.length > 0;\n            },\n                function () {\n\n                    // Gather up all the objects that can be saved in this batch.\n                    var batch = [];\n                    var newRemaining = [];\n                    Bmob._arrayEach(remaining,\n                        function (object) {\n                            // Limit batches to 20 objects.\n                            if (batch.length > 20) {\n                                newRemaining.push(object);\n                                return;\n                            }\n\n                            if (object._canBeSerialized()) {\n                                batch.push(object);\n                            } else {\n                                newRemaining.push(object);\n                            }\n                        });\n                    remaining = newRemaining;\n\n                    // If we can't save any objects, there must be a circular reference.\n                    if (batch.length === 0) {\n                        return Bmob.Promise.error(new Bmob.Error(Bmob.Error.OTHER_CAUSE, \"Tried to save a batch with a cycle.\"));\n                    }\n\n                    // Reserve a spot in every object's save queue.\n                    var readyToStart = Bmob.Promise.when(_.map(batch,\n                        function (object) {\n                            return object._allPreviousSaves || Bmob.Promise.as();\n                        }));\n                    var batchFinished = new Bmob.Promise();\n                    Bmob._arrayEach(batch,\n                        function (object) {\n                            object._allPreviousSaves = batchFinished;\n                        });\n\n                    // Save a single batch, whether previous saves succeeded or failed.\n                    return readyToStart._continueWith(function () {\n                        return Bmob._request(\"batch\", null, null, \"POST\", {\n                            requests: _.map(batch,\n                                function (object) {\n                                    var json = object._getSaveJSON();\n                                    var method = \"POST\";\n\n                                    var path = \"/1/classes/\" + object.className;\n                                    if (object.id) {\n                                        path = path + \"/\" + object.id;\n                                        method = \"PUT\";\n                                    }\n\n                                    object._startSave();\n\n                                    return {\n                                        method: method,\n                                        path: path,\n                                        body: json\n                                    };\n                                })\n\n                        }).then(function (response, status, xhr) {\n                            var error;\n                            Bmob._arrayEach(batch,\n                                function (object, i) {\n                                    if (response[i].success) {\n                                        object._finishSave(object.parse(response[i].success, status, xhr));\n                                    } else {\n                                        error = error || response[i].error;\n                                        object._cancelSave();\n                                    }\n                                });\n                            if (error) {\n                                return Bmob.Promise.error(new Bmob.Error(error.code, error.error));\n                            }\n\n                        }).then(function (results) {\n                            batchFinished.resolve(results);\n                            return results;\n                        },\n                            function (error) {\n                                batchFinished.reject(error);\n                                return Bmob.Promise.error(error);\n                            });\n                    });\n                });\n        }).then(function () {\n            return object;\n        });\n    };\n\n    /**\n   * Bmob.Role acl权限控制中的用户角色类\n   *\n   * <p>角色必须要有名称(名称创建后不能修改), 同时必须指定ACL</p>\n   * @class\n   * @namespace acl权限控制中的用户角色类\n   */\n    Bmob.Role = Bmob.Object.extend(\"_Role\",\n        /** @lends Bmob.Role.prototype */\n        {\n            // Instance Methods\n            /**\n         * 通过名称和ACL构造一个BmobRole\n         * @param {String} name 创建role的名称\n         * @param {Bmob.ACL} acl 这个角色的acl，角色必须要有一个ACL。\n         */\n            constructor: function (name, acl) {\n                if (_.isString(name) && (acl instanceof Bmob.ACL)) {\n                    Bmob.Object.prototype.constructor.call(this, null, null);\n                    this.setName(name);\n                    this.setACL(acl);\n                } else {\n                    Bmob.Object.prototype.constructor.call(this, name, acl);\n                }\n            },\n\n            /**\n         * 获取角色的name。同时可以使用role.get(\"name\")\n         * @return {String} 角色的名称\n         */\n            getName: function () {\n                return this.get(\"name\");\n            },\n\n            /**\n         * 设置角色的名称。这个值必须要在保存前设置，而且只能设置一次\n         * <p>\n         *   角色的名称只能包含数字，字母， _, -。\n         * </p>\n         *\n         * <p>等同于使用 role.set(\"name\", name)</p>\n         * @param {String} name 角色的名称\n         * @param {Object} options 标准options对象\n         */\n            setName: function (name, options) {\n                return this.set(\"name\", name, options);\n            },\n\n            /**\n         * 获取这个角色对应的用户Bmob.Users。这些用户已经被分配了权限（例如读写的权限）。\n         * 你能通过relation添加和移除这些用户\n         * <p>这等同于使用 role.relation(\"users\")</p>\n         *\n         * @return {Bmob.Relation} the relation for the users belonging to this\n         *     role.\n         */\n            getUsers: function () {\n                return this.relation(\"users\");\n            },\n\n            /**\n         * 获取这个角色对应的角色Bmob.Roles。这些用户已经被分配了权限（例如读写的权限）。\n         * 你能通过relation添加和移除这些用户\n         * <p>这等同于使用 role.relation(\"roles\")</p>\n         *\n         * @return {Bmob.Relation} the relation for the roles belonging to this\n         *     role.\n         */\n            getRoles: function () {\n                return this.relation(\"roles\");\n            },\n\n            /**\n         * @ignore\n         */\n            validate: function (attrs, options) {\n                if (\"name\" in attrs && attrs.name !== this.getName()) {\n                    var newName = attrs.name;\n                    if (this.id && this.id !== attrs.objectId) {\n                        // Check to see if the objectId being set matches this.id.\n                        // This happens during a fetch -- the id is set before calling fetch.\n                        // Let the name be set in this case.\n                        return new Bmob.Error(Bmob.Error.OTHER_CAUSE, \"A role's name can only be set before it has been saved.\");\n                    }\n                    if (!_.isString(newName)) {\n                        return new Bmob.Error(Bmob.Error.OTHER_CAUSE, \"A role's name must be a String.\");\n                    }\n                    if (!(/^[0-9a-zA-Z\\-_ ]+$/).test(newName)) {\n                        return new Bmob.Error(Bmob.Error.OTHER_CAUSE, \"A role's name can only contain alphanumeric characters, _,\" + \" -, and spaces.\");\n                    }\n                }\n                if (Bmob.Object.prototype.validate) {\n                    return Bmob.Object.prototype.validate.call(this, attrs, options);\n                }\n                return false;\n            }\n        });\n\n    /**\n   *创建model和options的实体。特别地，你不会直接调用这个方法，你会<code>Bmob.Collection.extend</code>通过创建一*个子类。\n   * @param {Array} <code>Bmob.Object</code>数组.\n   *\n   * @param {Object} options  Backbone-style options 的可选options object.\n   * 有效的 options<ul>\n   *   <li>model: Bmob.Object \n   *   <li>query: Bmob.Query\n   *   <li>comparator: 属性名称或排序函数\n   * </ul>\n   *\n   * @see Bmob.Collection.extend\n   *\n   *\n   * <p>提供标准的 collection class。 更详细的信息请看\n   * <a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\n   * documentation</a>.</p>\n   */\n    Bmob.Collection = function (models, options) {\n        options = options || {};\n        if (options.comparator) {\n            this.comparator = options.comparator;\n        }\n        if (options.model) {\n            this.model = options.model;\n        }\n        if (options.query) {\n            this.query = options.query;\n        }\n        this._reset();\n        this.initialize.apply(this, arguments);\n        if (models) {\n            this.reset(models, {\n                silent: true,\n                parse: options.parse\n            });\n        }\n    };\n\n    // Define the Collection's inheritable methods.\n    _.extend(Bmob.Collection.prototype, Bmob.Events,\n        /** @lends Bmob.Collection.prototype */\n        {\n\n            // The default model for a collection is just a Bmob.Object.\n            // This should be overridden in most cases.\n            model: Bmob.Object,\n\n            /**\n         * Initialize 默认是空函数. 请根据自身的逻辑重写这个方法\n         */\n            initialize: function () { },\n\n            /**\n         * \n         * json 格式的models'属性数组\n         */\n            toJSON: function () {\n                return this.map(function (model) {\n                    return model.toJSON();\n                });\n            },\n\n            /**\n         * 添加model，或者一系列的对象集合。传入**silent**避免触发`add`事件。\n         */\n            add: function (models, options) {\n                var i, index, length, model, cid, id, cids = {},\n                    ids = {};\n                options = options || {};\n                models = _.isArray(models) ? models.slice() : [models];\n\n                // Begin by turning bare objects into model references, and preventing\n                // invalid models or duplicate models from being added.\n                for (i = 0, length = models.length; i < length; i++) {\n                    models[i] = this._prepareModel(models[i], options);\n                    model = models[i];\n                    if (!model) {\n                        throw new Error(\"Can't add an invalid model to a collection\");\n                    }\n                    cid = model.cid;\n                    if (cids[cid] || this._byCid[cid]) {\n                        throw new Error(\"Duplicate cid: can't add the same model \" + \"to a collection twice\");\n                    }\n                    id = model.id;\n                    if (!Bmob._isNullOrUndefined(id) && (ids[id] || this._byId[id])) {\n                        throw new Error(\"Duplicate id: can't add the same model \" + \"to a collection twice\");\n                    }\n                    ids[id] = model;\n                    cids[cid] = model;\n                }\n\n                // Listen to added models' events, and index models for lookup by\n                // `id` and by `cid`.\n                for (i = 0; i < length; i++) {\n                    (model = models[i]).on('all', this._onModelEvent, this);\n                    this._byCid[model.cid] = model;\n                    if (model.id) {\n                        this._byId[model.id] = model;\n                    }\n                }\n\n                // Insert models into the collection, re-sorting if needed, and triggering\n                // `add` events unless silenced.\n                this.length += length;\n                index = Bmob._isNullOrUndefined(options.at) ? this.models.length : options.at;\n                this.models.splice.apply(this.models, [index, 0].concat(models));\n                if (this.comparator) {\n                    this.sort({\n                        silent: true\n                    });\n                }\n                if (options.silent) {\n                    return this;\n                }\n                for (i = 0, length = this.models.length; i < length; i++) {\n                    model = this.models[i];\n                    if (cids[model.cid]) {\n                        options.index = i;\n                        model.trigger('add', model, this, options);\n                    }\n                }\n                return this;\n            },\n\n            /**\n         * 移除一个model，或者从集合中移除一系列models。当移除对象时，传入silent避免触发<code>remove</code>事件。  \n         */\n            remove: function (models, options) {\n                var i, l, index, model;\n                options = options || {};\n                models = _.isArray(models) ? models.slice() : [models];\n                for (i = 0, l = models.length; i < l; i++) {\n                    model = this.getByCid(models[i]) || this.get(models[i]);\n                    if (!model) {\n                        continue;\n                    }\n                    delete this._byId[model.id];\n                    delete this._byCid[model.cid];\n                    index = this.indexOf(model);\n                    this.models.splice(index, 1);\n                    this.length--;\n                    if (!options.silent) {\n                        options.index = index;\n                        model.trigger('remove', model, this, options);\n                    }\n                    this._removeReference(model);\n                }\n                return this;\n            },\n\n            /**\n         * 通过id获取一个model\n         */\n            get: function (id) {\n                return id && this._byId[id.id || id];\n            },\n\n            /**\n         * 通过client id获取一个model\n         */\n            getByCid: function (cid) {\n                return cid && this._byCid[cid.cid || cid];\n            },\n\n            /**\n         * 通过下标获取一个model\n         */\n            at: function (index) {\n                return this.models[index];\n            },\n\n            /**\n         * 强制collection对自身的元素进行重新排序。一般情况下你不需要调用这个函数，因为当添加对象时这个函数会自动调用\n         */\n            sort: function (options) {\n                options = options || {};\n                if (!this.comparator) {\n                    throw new Error('Cannot sort a set without a comparator');\n                }\n                var boundComparator = _.bind(this.comparator, this);\n                if (this.comparator.length === 1) {\n                    this.models = this.sortBy(boundComparator);\n                } else {\n                    this.models.sort(boundComparator);\n                }\n                if (!options.silent) {\n                    this.trigger('reset', this, options);\n                }\n                return this;\n            },\n\n            /**\n         * 采集集合中每个对象的属性\n         */\n            pluck: function (attr) {\n                return _.map(this.models,\n                    function (model) {\n                        return model.get(attr);\n                    });\n            },\n\n            /**\n         * When you have more items than you want to add or remove individually,\n         * you can reset the entire set with a new list of models, without firing\n         * any `add` or `remove` events. Fires `reset` when finished.\n         */\n            reset: function (models, options) {\n                var self = this;\n                models = models || [];\n                options = options || {};\n                Bmob._arrayEach(this.models,\n                    function (model) {\n                        self._removeReference(model);\n                    });\n                this._reset();\n                this.add(models, {\n                    silent: true,\n                    parse: options.parse\n                });\n                if (!options.silent) {\n                    this.trigger('reset', this, options);\n                }\n                return this;\n            },\n\n            /**\n         * Fetches the default set of models for this collection, resetting the\n         * collection when they arrive. If `add: true` is passed, appends the\n         * models to the collection instead of resetting.\n         */\n            fetch: function (options) {\n                options = _.clone(options) || {};\n                if (options.parse === undefined) {\n                    options.parse = true;\n                }\n                var collection = this;\n                var query = this.query || new Bmob.Query(this.model);\n                return query.find().then(function (results) {\n                    if (options.add) {\n                        collection.add(results, options);\n                    } else {\n                        collection.reset(results, options);\n                    }\n                    return collection;\n                })._thenRunCallbacks(options, this);\n            },\n\n            /**\n         * Creates a new instance of a model in this collection. Add the model to\n         * the collection immediately, unless `wait: true` is passed, in which case\n         * we wait for the server to agree.\n         */\n            create: function (model, options) {\n                var coll = this;\n                options = options ? _.clone(options) : {};\n                model = this._prepareModel(model, options);\n                if (!model) {\n                    return false;\n                }\n                if (!options.wait) {\n                    coll.add(model, options);\n                }\n                var success = options.success;\n                options.success = function (nextModel, resp, xhr) {\n                    if (options.wait) {\n                        coll.add(nextModel, options);\n                    }\n                    if (success) {\n                        success(nextModel, resp);\n                    } else {\n                        nextModel.trigger('sync', model, resp, options);\n                    }\n                };\n                model.save(null, options);\n                return model;\n            },\n\n            /**\n         * Converts a response into a list of models to be added to the collection.\n         * The default implementation is just to pass it through.\n         * @ignore\n         */\n            parse: function (resp, xhr) {\n                return resp;\n            },\n\n            /**\n         * Proxy to _'s chain. Can't be proxied the same way the rest of the\n         * underscore methods are proxied because it relies on the underscore\n         * constructor.\n         */\n            chain: function () {\n                return _(this.models).chain();\n            },\n\n            /**\n         * Reset all internal state. Called when the collection is reset.\n         */\n            _reset: function (options) {\n                this.length = 0;\n                this.models = [];\n                this._byId = {};\n                this._byCid = {};\n            },\n\n            /**\n         * Prepare a model or hash of attributes to be added to this collection.\n         */\n            _prepareModel: function (model, options) {\n                if (!(model instanceof Bmob.Object)) {\n                    var attrs = model;\n                    options.collection = this;\n                    model = new this.model(attrs, options);\n                    if (!model._validate(model.attributes, options)) {\n                        model = false;\n                    }\n                } else if (!model.collection) {\n                    model.collection = this;\n                }\n                return model;\n            },\n\n            /**\n         * Internal method to remove a model's ties to a collection.\n         */\n            _removeReference: function (model) {\n                if (this === model.collection) {\n                    delete model.collection;\n                }\n                model.off('all', this._onModelEvent, this);\n            },\n\n            /**\n         * Internal method called every time a model in the set fires an event.\n         * Sets need to update their indexes when models change ids. All other\n         * events simply proxy through. \"add\" and \"remove\" events that originate\n         * in other collections are ignored.\n         */\n            _onModelEvent: function (ev, model, collection, options) {\n                if ((ev === 'add' || ev === 'remove') && collection !== this) {\n                    return;\n                }\n                if (ev === 'destroy') {\n                    this.remove(model, options);\n                }\n                if (model && ev === 'change:objectId') {\n                    delete this._byId[model.previous(\"objectId\")];\n                    this._byId[model.id] = model;\n                }\n                this.trigger.apply(this, arguments);\n            }\n\n        });\n\n    // Underscore methods that we want to implement on the Collection.\n    var methods = ['forEach', 'each', 'map', 'reduce', 'reduceRight', 'find', 'detect', 'filter', 'select', 'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke', 'max', 'min', 'sortBy', 'sortedIndex', 'toArray', 'size', 'first', 'initial', 'rest', 'last', 'without', 'indexOf', 'shuffle', 'lastIndexOf', 'isEmpty', 'groupBy'];\n\n    // Mix in each Underscore method as a proxy to `Collection#models`.\n    Bmob._arrayEach(methods,\n        function (method) {\n            Bmob.Collection.prototype[method] = function () {\n                return _[method].apply(_, [this.models].concat(_.toArray(arguments)));\n            };\n        });\n\n    /**\n   * Creates a new subclass of <code>Bmob.Collection</code>.  For example,<pre>\n   *   var MyCollection = Bmob.Collection.extend({\n   *     // Instance properties\n   *\n   *     model: MyClass,\n   *     query: MyQuery,\n   *\n   *     getFirst: function() {\n   *       return this.at(0);\n   *     }\n   *   }, {\n   *     // Class properties\n   *\n   *     makeOne: function() {\n   *       return new MyCollection();\n   *     }\n   *   });\n   *\n   *   var collection = new MyCollection();\n   * </pre>\n   *\n   * @function\n   * @param {Object} instanceProps Instance properties for the collection.\n   * @param {Object} classProps Class properies for the collection.\n   * @return {Class} A new subclass of <code>Bmob.Collection</code>.\n   */\n    Bmob.Collection.extend = Bmob._extend;\n\n    /**\n   * Creating a Bmob.View creates its initial element outside of the DOM,\n   * if an existing element is not provided...\n   *\n   * <p>A fork of Backbone.View, provided for your convenience.  If you use this\n   * class, you must also include jQuery, or another library that provides a\n   * jQuery-compatible $ function.  For more information, see the\n   * <a href=\"http://documentcloud.github.com/backbone/#View\">Backbone\n   * documentation</a>.</p>\n   * <p><strong><em>Available in the client SDK only.</em></strong></p>\n   */\n    Bmob.View = function (options) {\n        this.cid = _.uniqueId('view');\n        this._configure(options || {});\n        this._ensureElement();\n        this.initialize.apply(this, arguments);\n        this.delegateEvents();\n    };\n\n    // Cached regex to split keys for `delegate`.\n    var eventSplitter = /^(\\S+)\\s*(.*)$/;\n\n    // List of view options to be merged as properties.\n    var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName'];\n\n    // Set up all inheritable **Bmob.View** properties and methods.\n    _.extend(Bmob.View.prototype, Bmob.Events,\n        /** @lends Bmob.View.prototype */\n        {\n\n            // The default `tagName` of a View's element is `\"div\"`.\n            tagName: 'div',\n\n            /**\n         * jQuery delegate for element lookup, scoped to DOM elements within the\n         * current view. This should be prefered to global lookups where possible.\n         */\n            $: function (selector) {\n                return this.$el.find(selector);\n            },\n\n            /**\n         * Initialize is an empty function by default. Override it with your own\n         * initialization logic.\n         */\n            initialize: function () { },\n\n            /**\n         * The core function that your view should override, in order\n         * to populate its element (`this.el`), with the appropriate HTML. The\n         * convention is for **render** to always return `this`.\n         */\n            render: function () {\n                return this;\n            },\n\n            /**\n         * Remove this view from the DOM. Note that the view isn't present in the\n         * DOM by default, so calling this method may be a no-op.\n         */\n            remove: function () {\n                this.$el.remove();\n                return this;\n            },\n\n            /**\n         * For small amounts of DOM Elements, where a full-blown template isn't\n         * needed, use **make** to manufacture elements, one at a time.\n         * <pre>\n         *     var el = this.make('li', {'class': 'row'},\n         *                        this.model.escape('title'));</pre>\n         */\n            make: function (tagName, attributes, content) {\n                var el = document.createElement(tagName);\n                if (attributes) {\n                    Bmob.$(el).attr(attributes);\n                }\n                if (content) {\n                    Bmob.$(el).html(content);\n                }\n                return el;\n            },\n\n            /**\n         * Changes the view's element (`this.el` property), including event\n         * re-delegation.\n         */\n            setElement: function (element, delegate) {\n                this.$el = Bmob.$(element);\n                this.el = this.$el[0];\n                if (delegate !== false) {\n                    this.delegateEvents();\n                }\n                return this;\n            },\n\n            /**\n         * Set callbacks.  <code>this.events</code> is a hash of\n         * <pre>\n         * *{\"event selector\": \"callback\"}*\n         *\n         *     {\n         *       'mousedown .title':  'edit',\n         *       'click .button':     'save'\n         *       'click .open':       function(e) { ... }\n         *     }\n         * </pre>\n         * pairs. Callbacks will be bound to the view, with `this` set properly.\n         * Uses event delegation for efficiency.\n         * Omitting the selector binds the event to `this.el`.\n         * This only works for delegate-able events: not `focus`, `blur`, and\n         * not `change`, `submit`, and `reset` in Internet Explorer.\n         */\n            delegateEvents: function (events) {\n                events = events || Bmob._getValue(this, 'events');\n                if (!events) {\n                    return;\n                }\n                this.undelegateEvents();\n                var self = this;\n                Bmob._objectEach(events,\n                    function (method, key) {\n                        if (!_.isFunction(method)) {\n                            method = self[events[key]];\n                        }\n                        if (!method) {\n                            throw new Error('Event \"' + events[key] + '\" does not exist');\n                        }\n                        var match = key.match(eventSplitter);\n                        var eventName = match[1],\n                            selector = match[2];\n                        method = _.bind(method, self);\n                        eventName += '.delegateEvents' + self.cid;\n                        if (selector === '') {\n                            self.$el.bind(eventName, method);\n                        } else {\n                            self.$el.delegate(selector, eventName, method);\n                        }\n                    });\n            },\n\n            /**\n         * Clears all callbacks previously bound to the view with `delegateEvents`.\n         * You usually don't need to use this, but may wish to if you have multiple\n         * Backbone views attached to the same DOM element.\n         */\n            undelegateEvents: function () {\n                this.$el.unbind('.delegateEvents' + this.cid);\n            },\n\n            /**\n         * Performs the initial configuration of a View with a set of options.\n         * Keys with special meaning *(model, collection, id, className)*, are\n         * attached directly to the view.\n         */\n            _configure: function (options) {\n                if (this.options) {\n                    options = _.extend({},\n                        this.options, options);\n                }\n                var self = this;\n                _.each(viewOptions,\n                    function (attr) {\n                        if (options[attr]) {\n                            self[attr] = options[attr];\n                        }\n                    });\n                this.options = options;\n            },\n\n            /**\n         * Ensure that the View has a DOM element to render into.\n         * If `this.el` is a string, pass it through `$()`, take the first\n         * matching element, and re-assign it to `el`. Otherwise, create\n         * an element from the `id`, `className` and `tagName` properties.\n         */\n            _ensureElement: function () {\n                if (!this.el) {\n                    var attrs = Bmob._getValue(this, 'attributes') || {};\n                    if (this.id) {\n                        attrs.id = this.id;\n                    }\n                    if (this.className) {\n                        attrs['class'] = this.className;\n                    }\n                    this.setElement(this.make(this.tagName, attrs), false);\n                } else {\n                    this.setElement(this.el, false);\n                }\n            }\n\n        });\n\n    /**\n   * @function\n   * @param {Object} instanceProps Instance properties for the view.\n   * @param {Object} classProps Class properies for the view.\n   * @return {Class} A new subclass of <code>Bmob.View</code>.\n   */\n    Bmob.View.extend = Bmob._extend;\n\n    /**\n   * @class\n   *\n   * <p>这个类是Bmob.Object的子类，同时拥有Bmob.Object的所有函数，但是扩展了用户的特殊函数，例如验证，登录等</p>   \n   */\n    Bmob.User = Bmob.Object.extend(\"_User\",\n        /** @lends Bmob.User.prototype */\n        {\n            // Instance Variables\n            _isCurrentUser: false,\n\n            // Instance Methods\n            /**\n         * Internal method to handle special fields in a _User response.\n         */\n            _mergeMagicFields: function (attrs) {\n                if (attrs.sessionToken) {\n                    this._sessionToken = attrs.sessionToken;\n                    delete attrs.sessionToken;\n                }\n                Bmob.User.__super__._mergeMagicFields.call(this, attrs);\n            },\n\n            /**\n         * Removes null values from authData (which exist temporarily for\n         * unlinking)\n         */\n            _cleanupAuthData: function () {\n                if (!this.isCurrent()) {\n                    return;\n                }\n                var authData = this.get('authData');\n                if (!authData) {\n                    return;\n                }\n                Bmob._objectEach(this.get('authData'),\n                    function (value, key) {\n                        if (!authData[key]) {\n                            delete authData[key];\n                        }\n                    });\n            },\n\n            /**\n         * Synchronizes authData for all providers.\n         */\n            _synchronizeAllAuthData: function () {\n                var authData = this.get('authData');\n                if (!authData) {\n                    return;\n                }\n\n                var self = this;\n                Bmob._objectEach(this.get('authData'),\n                    function (value, key) {\n                        self._synchronizeAuthData(key);\n                    });\n            },\n\n            /**\n         * Synchronizes auth data for a provider (e.g. puts the access token in the\n         * right place to be used by the Facebook SDK).\n         */\n            _synchronizeAuthData: function (provider) {\n                if (!this.isCurrent()) {\n                    return;\n                }\n                var authType;\n                if (_.isString(provider)) {\n                    authType = provider;\n                    provider = Bmob.User._authProviders[authType];\n                } else {\n                    authType = provider.getAuthType();\n                }\n                var authData = this.get('authData');\n                if (!authData || !provider) {\n                    return;\n                }\n                var success = provider.restoreAuthentication(authData[authType]);\n                if (!success) {\n                    this._unlinkFrom(provider);\n                }\n            },\n\n            _handleSaveResult: function (makeCurrent) {\n                // Clean up and synchronize the authData object, removing any unset values\n                if (makeCurrent) {\n                    this._isCurrentUser = true;\n                }\n                this._cleanupAuthData();\n                this._synchronizeAllAuthData();\n                // Don't keep the password around.\n                delete this._serverData.password;\n                this._rebuildEstimatedDataForKey(\"password\");\n                this._refreshCache();\n                if (makeCurrent || this.isCurrent()) {\n                    Bmob.User._saveCurrentUser(this);\n                }\n\n            },\n\n\n            /**\n            * 使用第三方登录，登录或注册\n            * @Magic 2.0.0\n            * @return {Bmob.User}\n            */\n            _linkWith: function _linkWith(provider, data) {\n                var _this = this;\n\n                var authType;\n                if (_.isString(provider)) {\n                    authType = provider;\n                    provider = Bmob.User._authProviders[provider];\n                } else {\n                    authType = provider.getAuthType();\n                }\n                if (data) {\n                    var authData = this.get('authData') || {};\n                    authData[authType] = data;\n                    this.set('authData', authData);\n\n                    var promise = new Bmob.Promise();\n                    this.save({\n                        'authData': authData\n                    }, newOptions).then(\n                        function (model) {\n                            model._handleSaveResult(true);\n                            promise.resolve(model);\n                        }\n                        );\n\n\n                    return promise._thenRunCallbacks({});\n\n                    // Overridden so that the user can be made the current user.\n                    var newOptions = _.clone(data) || {};\n                    newOptions.success = function (model) {\n                        model._handleSaveResult(true);\n                        if (data.success) {\n                            data.success.apply(this, arguments);\n                        }\n                    };\n\n                    return this.save({\n                        'authData': authData\n                    },\n                        newOptions);\n                } else {\n                    return provider.authenticate().then(function (result) {\n                        return _this._linkWith(provider, result);\n                    });\n                }\n            },\n\n            /**\n             * 使用当前使用小程序的微信用户身份注册或登录，成功后用户的 session 会在设备上持久化保存，之后可以使用 Bmob.User.current() 获取当前登录用户。\n             * @Magic 2.0.0\n             * @return {Bmob.User}\n             */\n            loginWithWeapp: function (code) {\n                var that = this;\n                var promise = new Bmob.Promise();\n                Bmob.User.requestOpenId(code, {\n                    success: function (authData) {//获取授权成功\n                        var platform = \"weapp\";\n                        var user = Bmob.Object._create(\"_User\");\n                        user._linkWith(platform, authData).then(function (resp) {\n                            promise.resolve(resp);\n                        }, function (error) {\n                            promise.reject(error);\n                        });\n\n                    },\n                    error: function (error) {\n                        promise.reject(error);\n                    }\n                }\n\n                );\n                return promise._thenRunCallbacks({});\n\n            },\n\n\n            /**\n         * Unlinks a user from a service.\n         */\n            _unlinkFrom: function (provider, options) {\n                var authType;\n                if (_.isString(provider)) {\n                    authType = provider;\n                    provider = Bmob.User._authProviders[provider];\n                } else {\n                    authType = provider.getAuthType();\n                }\n                var newOptions = _.clone(options);\n                var self = this;\n                newOptions.authData = null;\n                newOptions.success = function (model) {\n                    self._synchronizeAuthData(provider);\n                    if (options.success) {\n                        options.success.apply(this, arguments);\n                    }\n                };\n                return this._linkWith(provider, newOptions);\n            },\n\n            /**\n         * Checks whether a user is linked to a service.\n         */\n            _isLinked: function (provider) {\n                var authType;\n                if (_.isString(provider)) {\n                    authType = provider;\n                } else {\n                    authType = provider.getAuthType();\n                }\n                var authData = this.get('authData') || {};\n                return !!authData[authType];\n            },\n\n            /**\n         * Deauthenticates all providers.\n         */\n            _logOutWithAll: function () {\n                var authData = this.get('authData');\n                if (!authData) {\n                    return;\n                }\n                var self = this;\n                Bmob._objectEach(this.get('authData'),\n                    function (value, key) {\n                        self._logOutWith(key);\n                    });\n            },\n\n            /**\n         * Deauthenticates a single provider (e.g. removing access tokens from the\n         * Facebook SDK).\n         */\n            _logOutWith: function (provider) {\n                if (!this.isCurrent()) {\n                    return;\n                }\n                if (_.isString(provider)) {\n                    provider = Bmob.User._authProviders[provider];\n                }\n                if (provider && provider.deauthenticate) {\n                    provider.deauthenticate();\n                }\n            },\n\n            /**\n         * 注册一个新用户。当创建一个新用户时，应该调用这个方法而不是save方法。这个方法会创建\n         * 一个新的Bmob.User在服务器上，同时保存session在本地磁盘因此你可以通过<code>current</code>访问user\n         * <p>在注册前必须设置username和password</p>\n         * <p>完成后调用options.success 或者 options.error</p>\n         *\n         * @param {Object} attrs 用户的额外的属性，或者null\n         * @param {Object} options Backbone-style options 对象。\n         * @return {Bmob.Promise} 当调用结束将会返回promise。\n         * @see Bmob.User.signUp\n         */\n            signUp: function (attrs, options) {\n                var error;\n                options = options || {};\n\n                var username = (attrs && attrs.username) || this.get(\"username\");\n                if (!username || (username === \"\")) {\n                    error = new Bmob.Error(Bmob.Error.OTHER_CAUSE, \"Cannot sign up user with an empty name.\");\n                    if (options && options.error) {\n                        options.error(this, error);\n                    }\n                    return Bmob.Promise.error(error);\n                }\n\n                var password = (attrs && attrs.password) || this.get(\"password\");\n                if (!password || (password === \"\")) {\n                    error = new Bmob.Error(Bmob.Error.OTHER_CAUSE, \"Cannot sign up user with an empty password.\");\n                    if (options && options.error) {\n                        options.error(this, error);\n                    }\n                    return Bmob.Promise.error(error);\n                }\n\n                // Overridden so that the user can be made the current user.\n                var newOptions = _.clone(options);\n                newOptions.success = function (model) {\n                    model._handleSaveResult(true);\n                    if (options.success) {\n                        options.success.apply(this, arguments);\n                    }\n                };\n                return this.save(attrs, newOptions);\n            },\n\n            /**\n         * 用户登录。当登录成功，将会保存session在本地，可以通过<code>current</code>获取用户对象。\n         * <p>在注册前必须设置username和password</p>\n         * <p>完成后调用options.success 或者 options.error</p>\n         *\n         * @param {Object} options  Backbone-style options 对象。\n         * @see Bmob.User.logIn\n         * @return {Bmob.Promise} 当调用结束将会返回promise。\n         */\n            logIn: function (options) {\n                var model = this;\n                var request = Bmob._request(\"login\", null, null, \"GET\", this.toJSON());\n                return request.then(function (resp, status, xhr) {\n                    var serverAttrs = model.parse(resp, status, xhr);\n                    model._finishFetch(serverAttrs);\n                    model._handleSaveResult(true);\n                    return model;\n                })._thenRunCallbacks(options, this);\n            },\n\n            /**\n         * 保存对象\n         * @see Bmob.Object#save\n         */\n            save: function (arg1, arg2, arg3) {\n                var i, attrs, current, options, saved;\n                if (_.isObject(arg1) || _.isNull(arg1) || _.isUndefined(arg1)) {\n                    attrs = arg1;\n                    options = arg2;\n                } else {\n                    attrs = {};\n                    attrs[arg1] = arg2;\n                    options = arg3;\n                }\n                options = options || {};\n\n                var newOptions = _.clone(options);\n                newOptions.success = function (model) {\n                    model._handleSaveResult(false);\n                    if (options.success) {\n                        options.success.apply(this, arguments);\n                    }\n                };\n                return Bmob.Object.prototype.save.call(this, attrs, newOptions);\n            },\n\n            /**\n         * 获取一个对象\t   \n         * @see Bmob.Object#fetch\n         */\n            fetch: function (options) {\n                var newOptions = options ? _.clone(options) : {};\n                newOptions.success = function (model) {\n                    model._handleSaveResult(false);\n                    if (options && options.success) {\n                        options.success.apply(this, arguments);\n                    }\n                };\n                return Bmob.Object.prototype.fetch.call(this, newOptions);\n            },\n\n            /**\n         * 返回true 如果<code>current</code>可以返回这个user。\n         * @see Bmob.User#cu 你不能添加一个没保存的Bmob.Object到关系中\n         */\n            isCurrent: function () {\n                return this._isCurrentUser;\n            },\n\n            /**\n         * 返回 get(\"username\").\n         * @return {String}\n         * @see Bmob.Object#get\n         */\n            getUsername: function () {\n                return this.get(\"username\");\n            },\n\n            /**\n         * 调用 set(\"username\", username, options) 同时返回结果\n         * @param {String} username\n         * @param {Object} options Backbone-style options 对象。\n         * @return {Boolean}\n         * @see Bmob.Object.set\n         */\n            setUsername: function (username, options) {\n                return this.set(\"username\", username, options);\n            },\n\n            /**\n         * 调用 set(\"password\", password, options) 同时返回结果\n         * @param {String} password\n         * @param {Object} options Backbone-style options 对象。\n         * @return {Boolean}\n         * @see Bmob.Object.set\n         */\n            setPassword: function (password, options) {\n                return this.set(\"password\", password, options);\n            },\n\n            /**\n         * 返回 get(\"email\").\n         * @return {String}\n         * @see Bmob.Object#get\n         */\n            getEmail: function () {\n                return this.get(\"email\");\n            },\n\n            /**\n         * 调用 set(\"email\", email, options) 同时返回结果\n         * @param {String} email\n         * @param {Object} options Backbone-style options 对象。\n         * @return {Boolean}\n         * @see Bmob.Object.set\n         */\n            setEmail: function (email, options) {\n                return this.set(\"email\", email, options);\n            },\n\n            /**\n         * 检查这个用户是否当前用户并且已经登录。\n         * @return (Boolean) 这个用户是否当前用户并且已经登录。\n         */\n            authenticated: function () {\n                return !!this._sessionToken && (Bmob.User.current() && Bmob.User.current().id === this.id);\n            }\n\n        },\n        /** @lends Bmob.User */\n        {\n            // Class Variables\n            // The currently logged-in user.\n            _currentUser: null,\n\n            // Whether currentUser is known to match the serialized version on disk.\n            // This is useful for saving a localstorage check if you try to load\n            // _currentUser frequently while there is none stored.\n            _currentUserMatchesDisk: false,\n\n            // The localStorage key suffix that the current user is stored under.\n            _CURRENT_USER_KEY: \"currentUser\",\n\n            // The mapping of auth provider names to actual providers\n            _authProviders: {},\n\n            // Class Methods\n            /**\n         * 注册一个新用户。当创建一个新用户时，应该调用这个方法而不是save方法。这个方法会创建\n         * 一个新的Bmob.User在服务器上，同时保存session在本地磁盘因此你可以通过<code>current</code>访问user\n         *\n         * <p>完成后调用options.success 或者 options.error</p>\n         *\n         * @param {String} username 注册的用户名或email\n         * @param {String} password 注册的密码\n         * @param {Object} attrs 新用户所需要的额外数据\n         * @param {Object} options Backbone-style options 对象。\n         * @return {Bmob.Promise} 当调用结束将会返回promise。\n         * @see Bmob.User#signUp\n         */\n            signUp: function (username, password, attrs, options) {\n                attrs = attrs || {};\n                attrs.username = username;\n                attrs.password = password;\n                var user = Bmob.Object._create(\"_User\");\n                return user.signUp(attrs, options);\n            },\n\n            /**\n         * 用户登录。当登录成功，将会保存session在本地，可以通过<code>current</code>获取用户对象。\n         *\n         * <p>完成后调用options.success 或者 options.error</p>\n         *\n         * @param {String} username 注册的用户名或email\n         * @param {String} password 注册的密码\n         * @param {Object} options 新用户所需要的额外数据\n         * @return {Bmob.Promise} Backbone-style options 对象。\n         * @see Bmob.User#logIn\n         */\n            logIn: function (username, password, options) {\n                var user = Bmob.Object._create(\"_User\");\n                user._finishFetch({\n                    username: username,\n                    password: password\n                });\n                return user.logIn(options);\n            },\n\n            /**\n         * 退出当前登录的用户。磁盘中的session将会被移除，调用<code>current</code>将会\n         * 返回<code>null</code>。\n         */\n            logOut: function () {\n                if (Bmob.User._currentUser !== null) {\n                    Bmob.User._currentUser._logOutWithAll();\n                    Bmob.User._currentUser._isCurrentUser = false;\n                }\n                Bmob.User._currentUserMatchesDisk = true;\n                Bmob.User._currentUser = null;\n\n                wx.removeStorage({\n                    key: Bmob._getBmobPath(Bmob.User._CURRENT_USER_KEY),\n                    success: function (res) {\n                        console.log(res.data)\n                    }\n                });\n            },\n\n            /**\n    \n         * 把重设密码的邮件发送到用户的注册邮箱。邮件允许用户在bmob网站上重设密码。\n         * <p>完成后调用options.success 或者 options.error</p>\n         *\n         * @param {String} email 用户注册的邮箱\n         * @param {Object} options Backbone-style options 对象。\n         */\n            requestPasswordReset: function (email, options) {\n                var json = {\n                    email: email\n                };\n                var request = Bmob._request(\"requestPasswordReset\", null, null, \"POST\", json);\n                return request._thenRunCallbacks(options);\n            },\n\n            /**\n         * 请求验证email\n         * <p>完成后调用options.success 或者 options.error</p>\n         *\n         * @param {String} email 需要验证email的email的地址\n         * @param {Object} options Backbone-style options 对象。\n         */\n            requestEmailVerify: function (email, options) {\n                var json = {\n                    email: email\n                };\n                var request = Bmob._request(\"requestEmailVerify\", null, null, \"POST\", json);\n                return request._thenRunCallbacks(options);\n            },\n\n            /**\n         * 请求openid值\n         * <p>完成后调用options.success 或者 options.error</p>\n         *\n         * @param {String} code 微信的code\n         * @param {Object} options Backbone-style options 对象。\n         */\n            requestOpenId: function (code, options) {\n                var json = {\n                    code: code\n                };\n                var request = Bmob._request(\"wechatApp\", code, null, \"POST\", json);\n                return request._thenRunCallbacks(options);\n            },\n\n            /**\n         * 返回当前已经登陆的用户。\n         * @return {Bmob.Object} 已经登录的Bmob.User.\n         */\n            current: function () {\n                if (Bmob.User._currentUser) {\n                    return Bmob.User._currentUser;\n                }\n\n                if (Bmob.User._currentUserMatchesDisk) {\n\n                    return Bmob.User._currentUser;\n                }\n\n                // Load the user from local storage.\n                Bmob.User._currentUserMatchesDisk = true;\n\n                // var userData = Bmob.localStorage.getItem(Bmob._getBmobPath(\n                //     Bmob.User._CURRENT_USER_KEY));\n                var userData = false;\n                try {\n                    var userData = wx.getStorageSync(Bmob._getBmobPath(Bmob.User._CURRENT_USER_KEY))\n                    if (userData) {\n                        // Do something with return value\n                        Bmob.User._currentUser = Bmob.Object._create(\"_User\");\n                        Bmob.User._currentUser._isCurrentUser = true;\n\n                        var json = JSON.parse(userData);\n                        Bmob.User._currentUser.id = json._id;\n                        delete json._id;\n                        Bmob.User._currentUser._sessionToken = json._sessionToken;\n                        delete json._sessionToken;\n                        Bmob.User._currentUser.set(json);\n\n                        Bmob.User._currentUser._synchronizeAllAuthData();\n                        Bmob.User._currentUser._refreshCache();\n                        Bmob.User._currentUser._opSetQueue = [{}];\n                        return Bmob.User._currentUser;\n                    }\n                } catch (e) {\n                    // Do something when catch error\n                    return null;\n                }\n            },\n\n            /**\n         * Persists a user as currentUser to localStorage, and into the singleton.\n         */\n            _saveCurrentUser: function (user) {\n                if (Bmob.User._currentUser !== user) {\n                    Bmob.User.logOut();\n                }\n                user._isCurrentUser = true;\n                Bmob.User._currentUser = user;\n                Bmob.User._currentUserMatchesDisk = true;\n\n                var json = user.toJSON();\n                json._id = user.id;\n                json._sessionToken = user._sessionToken;\n                wx.setStorage({\n                    key: Bmob._getBmobPath(Bmob.User._CURRENT_USER_KEY),\n                    data: JSON.stringify(json)\n                })\n            },\n\n            _registerAuthenticationProvider: function (provider) {\n                Bmob.User._authProviders[provider.getAuthType()] = provider;\n                // Synchronize the current user with the auth provider.\n                if (Bmob.User.current()) {\n                    Bmob.User.current()._synchronizeAuthData(provider.getAuthType());\n                }\n            },\n\n            _logInWith: function (provider, options) {\n                var user = Bmob.Object._create(\"_User\");\n                return user._linkWith(provider, options);\n            }\n\n        });\n\n    /**\n   * 为Bmob.Object类创建一个新的bmob Bmob.Query 。\n   * @param objectClass -\n   *   Bmob.Object的实例，或者Bmob类名\n   * \n   *\n   * <p>Bmob.Query 为Bmob.Objects定义了query操作。最常用的操作就是用query<code>find</code>\n   * 操作去获取所有的对象。例如，下面简单的操作是获取所有的<code>MyClass</code>。根据操作的成功或失败，\n   * 会回调不同的函数。      \n   * <pre>\n   * var query = new Bmob.Query(MyClass);\n   * query.find({\n   *   success: function(results) {\n   *     // results is an array of Bmob.Object.\n   *   },\n   *\n   *   error: function(error) {\n   *     // error is an instance of Bmob.Error.\n   *   }\n   * });</pre></p>\n   *\n   * <p>Bmob.Query也可以用来获取一个id已知的对象。例如，下面的例子获取了<code>MyClass</code> 和 id <code>myId</code>\n   * 根据操作的成功或失败，会回调不同的函数。  \n   * <pre>\n   * var query = new Bmob.Query(MyClass);\n   * query.get(myId, {\n   *   success: function(object) {\n   *     // object is an instance of Bmob.Object.\n   *   },\n   *\n   *   error: function(object, error) {\n   *     // error is an instance of Bmob.Error.\n   *   }\n   * });</pre></p>\n   *\n   * <p>Bmob.Query 同时也能获取查询结果的数目。例如，下面的例子获取了<code>MyClass</code>的数目<pre>   \n   * var query = new Bmob.Query(MyClass);\n   * query.count({\n   *   success: function(number) {\n   *     // There are number instances of MyClass.\n   *   },\n   *\n   *   error: function(error) {\n   *     // error is an instance of Bmob.Error.\n   *   }\n   * });</pre></p>\n   \n   * @class Bmob.Query 为Bmob.Objects定义了query操作\n   */\n    Bmob.Query = function (objectClass) {\n        if (_.isString(objectClass)) {\n            objectClass = Bmob.Object._getSubclass(objectClass);\n        }\n\n        this.objectClass = objectClass;\n\n        this.className = objectClass.prototype.className;\n\n        this._where = {};\n        this._include = [];\n        this._limit = -1; // negative limit means, do not send a limit\n        this._skip = 0;\n        this._extraOptions = {};\n    };\n\n    /**\n   * 通过传递query构造or的Bmob.Query对象。  For\n   * example:\n   * <pre>var compoundQuery = Bmob.Query.or(query1, query2, query3);</pre>\n   * 通过query1, query2, 和 query3创建一个or查询\n   * @param {...Bmob.Query} var_args or的query查询.\n   * @return {Bmob.Query} 查询结果.\n   */\n    Bmob.Query.or = function () {\n        var queries = _.toArray(arguments);\n        var className = null;\n        Bmob._arrayEach(queries,\n            function (q) {\n                if (_.isNull(className)) {\n                    className = q.className;\n                }\n\n                if (className !== q.className) {\n                    throw \"All queries must be for the same class\";\n                }\n            });\n        var query = new Bmob.Query(className);\n        query._orQuery(queries);\n        return query;\n    };\n\n    Bmob.Query._extend = Bmob._extend;\n\n    Bmob.Query.prototype = {\n        //hook to iterate result. Added by dennis<xzhuang@bmob.cn>.\n        _processResult: function (obj) {\n            return obj;\n        },\n\n        /**\t   \n     * 获取Bmob.Object，适用于id已经知道的情况。当查询完成会调用options.success 或 options.error。\n     * @param {} objectId 要获取的对象id\n     * @param {Object} options  Backbone-style options 对象.\n     */\n        get: function (objectId, options) {\n            var self = this;\n            self.equalTo('objectId', objectId);\n\n            return self.first().then(function (response) {\n                if (response) {\n                    return response;\n                }\n\n                var errorObject = new Bmob.Error(Bmob.Error.OBJECT_NOT_FOUND, \"Object not found.\");\n                return Bmob.Promise.error(errorObject);\n\n            })._thenRunCallbacks(options, null);\n        },\n\n        /**\n     * 返回json的结局\n     * @return {Object}\n     */\n        toJSON: function () {\n            var params = {\n                where: this._where\n            };\n\n            if (this._include.length > 0) {\n                params.include = this._include.join(\",\");\n            }\n            if (this._select) {\n                params.keys = this._select.join(\",\");\n            }\n            if (this._limit >= 0) {\n                params.limit = this._limit;\n            }\n            if (this._skip > 0) {\n                params.skip = this._skip;\n            }\n            if (this._order !== undefined) {\n                params.order = this._order;\n            }\n\n            Bmob._objectEach(this._extraOptions,\n                function (v, k) {\n                    params[k] = v;\n                });\n\n            return params;\n        },\n\n        _newObject: function (response) {\n            if (typeof (obj) === \"undefined\") {\n                var obj;\n            }\n            if (response && response.className) {\n                obj = new Bmob.Object(response.className);\n            } else {\n                obj = new this.objectClass();\n            }\n            return obj;\n        },\n        _createRequest: function (params) {\n            return Bmob._request(\"classes\", this.className, null, \"GET\", params || this.toJSON());\n        },\n\n        /**\n     * 查找满足查询条件的对象。完成后，options.success 或 options.error 会被调用。\n     * @param {Object} options A Backbone-style options 对象.\n     * @return {Bmob.Promise} 当查询完成后，结果的 promise 会被调用。\n     */\n        find: function (options) {\n            var self = this;\n\n            var request = this._createRequest();\n\n            return request.then(function (response) {\n                return _.map(response.results,\n                    function (json) {\n                        var obj = self._newObject(response);\n                        obj._finishFetch(self._processResult(json), true);\n                        return obj;\n                    });\n            })._thenRunCallbacks(options);\n        },\n\n        /**\n    * \t把查询到的所有对象删除。\n    * @param {Object} options 标准的带 success and error回调的options对象。\n    * @return {Bmob.Promise}  当完成后，结果的 promise 会被调用。\n    */\n        destroyAll: function (options) {\n            var self = this;\n            return self.find().then(function (objects) {\n                return Bmob.Object.destroyAll(objects);\n            })._thenRunCallbacks(options);\n        },\n\n        /**\n     * 查询结果的数目。\n     * 完成后，options.success 或 options.error 会被调用。\n     *\n     * @param {Object} options A Backbone-style options 对象.\n     * @return {Bmob.Promise} 完成后，结果的 promise 会被调用。\n     */\n        count: function (options) {\n            var params = this.toJSON();\n            params.limit = 0;\n            params.count = 1;\n            var request = this._createRequest(params);\n\n            return request.then(function (response) {\n                return response.count;\n            })._thenRunCallbacks(options);\n        },\n\n        /**\n     * 在返回的结果中，返回第一个对象\n     * 完成后，options.success 或 options.error 会被调用。\n     *\n     * @param {Object} options A Backbone-style options 对象.\n     * @return {Bmob.Promise} 完成后，结果的 promise 会被调用。\n     */\n        first: function (options) {\n            var self = this;\n\n            var params = this.toJSON();\n            params.limit = 1;\n            var request = this._createRequest(params);\n\n            return request.then(function (response) {\n                return _.map(response.results,\n                    function (json) {\n                        var obj = self._newObject();\n                        obj._finishFetch(self._processResult(json), true);\n                        return obj;\n                    })[0];\n            })._thenRunCallbacks(options);\n        },\n\n        /**\n     * 查询后返回一个Bmob.Collection\n     * @return {Bmob.Collection}\n     */\n        collection: function (items, options) {\n            options = options || {};\n            return new Bmob.Collection(items, _.extend(options, {\n                model: this._objectClass || this.objectClass,\n                query: this\n            }));\n        },\n\n        /**\n     * 在返回结果前设置跳过的结果数目。是在分页时使用的。默认是跳过0条结果。\n     * @param {Number} n 跳过的数目。\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        skip: function (n) {\n            this._skip = n;\n            return this;\n        },\n\n        /**\n     * 限制返回结果的数目。默认限制是100，最大限制数是1000.\n     * @param {Number} n 限制的数目。\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        limit: function (n) {\n            this._limit = n;\n            return this;\n        },\n\n        /**\n     * 添加一个equal查询（key value 形式）。\n     * @param {String} key key\n     * @param value  key对应的值\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        equalTo: function (key, value) {\n            this._where[key] = Bmob._encode(value);\n            return this;\n        },\n\n        /**\n     * Helper for condition queries\n     */\n        _addCondition: function (key, condition, value) {\n            // Check if we already have a condition\n            if (!this._where[key]) {\n                this._where[key] = {};\n            }\n            this._where[key][condition] = Bmob._encode(value);\n            return this;\n        },\n\n        /**\n     * 添加一个not equal查询（key value 形式）。\n     * @param {String} key key\n     * @param value  key对应的值\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        notEqualTo: function (key, value) {\n            this._addCondition(key, \"$ne\", value);\n            return this;\n        },\n\n        /**\n     * 添加一个小于查询。\n     * @param {String} key 需要检查的key.\n     * @param value key所对应的必须少于的值\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        lessThan: function (key, value) {\n            this._addCondition(key, \"$lt\", value);\n            return this;\n        },\n\n        /**\n     * 添加一个大于查询。\n     * @param {String} key 需要检查的key.\n     * @param value key所对应的必须大于的值\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        greaterThan: function (key, value) {\n            this._addCondition(key, \"$gt\", value);\n            return this;\n        },\n\n        /**\n     * 添加一个小于等于查询。\n     * @param {String} key 需要检查的key.\n     * @param value key所对应的必须少于等于的值\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        lessThanOrEqualTo: function (key, value) {\n            this._addCondition(key, \"$lte\", value);\n            return this;\n        },\n\n        /**\n     * 添加一个大于等于查询。\n     * @param {String} key 需要检查的key.\n     * @param value key所对应的必须大于等于的值\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        greaterThanOrEqualTo: function (key, value) {\n            this._addCondition(key, \"$gte\", value);\n            return this;\n        },\n\n        /**\n     * 添加key中包含任意一个值查询。\n     * @param {String} key 需要检查的key.\n     * @param {Array} values 需要包含的值的数组\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        containedIn: function (key, values) {\n            this._addCondition(key, \"$in\", values);\n            return this;\n        },\n\n        /**\n     * 添加key中不包含任意一个值查询。\n     * @param {String} key 需要检查的key.\n     * @param {Array} values 不需要包含的值的数组\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        notContainedIn: function (key, values) {\n            this._addCondition(key, \"$nin\", values);\n            return this;\n        },\n\n        /**\n     * 添加key中包含全部值查询。\n     * @param {String} key 需要检查的key\n     * @param {Array} values 需要包含的全部值的数组\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        containsAll: function (key, values) {\n            this._addCondition(key, \"$all\", values);\n            return this;\n        },\n\n        /**\n     * 添加key是否存在的查询。\n     * @param {String} key 需要检查是否存在的key。\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        exists: function (key) {\n            this._addCondition(key, \"$exists\", true);\n            return this;\n        },\n\n        /**\n     * 添加key是否不存在的查询。\n     * @param {String} key 需要检查是否不存在的key。\n     * @return {Bmob.Query}返回查询对象，因此可以使用链式调用。\n     */\n        doesNotExist: function (key) {\n            this._addCondition(key, \"$exists\", false);\n            return this;\n        },\n\n        /**\n     * 添加正则表达式的查询。\n     * 当数据很大的时候这个操作可能很慢。\n     * @param {String} key 需要检查的key\n     * @param {RegExp} regex 需要匹配的正则表达式\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        matches: function (key, regex, modifiers) {\n            this._addCondition(key, \"$regex\", regex);\n            if (!modifiers) {\n                modifiers = \"\";\n            }\n            // Javascript regex options support mig as inline options but store them\n            // as properties of the object. We support mi & should migrate them to\n            // modifiers\n            if (regex.ignoreCase) {\n                modifiers += 'i';\n            }\n            if (regex.multiline) {\n                modifiers += 'm';\n            }\n\n            if (modifiers && modifiers.length) {\n                this._addCondition(key, \"$options\", modifiers);\n            }\n            return this;\n        },\n\n        /**\n     * 添加一个Bmob.Query的匹配查询。\n     * @param {String} key 需要检查的key。\n     * @param {Bmob.Query} query 需要匹配的query\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        matchesQuery: function (key, query) {\n            var queryJSON = query.toJSON();\n            queryJSON.className = query.className;\n            this._addCondition(key, \"$inQuery\", queryJSON);\n            return this;\n        },\n\n        /**\n     * 添加一个Bmob.Query的不匹配查询。\n     * @param {String} key 需要检查的key。\n     * @param {Bmob.Query} 不需要匹配的query\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        doesNotMatchQuery: function (key, query) {\n            var queryJSON = query.toJSON();\n            queryJSON.className = query.className;\n            this._addCondition(key, \"$notInQuery\", queryJSON);\n            return this;\n        },\n\n        /**\n     * 添加查询： key's value 匹配一个对象，这个对象通过不同的Bmob.Query返回。\n     * @param {String} key 需要匹配的key值\n     * @param {String} queryKey 返回通过匹配的查询的对象的键 \n     * @param {Bmob.Query} query 需要运行的查询\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        matchesKeyInQuery: function (key, queryKey, query) {\n            var queryJSON = query.toJSON();\n            queryJSON.className = query.className;\n            this._addCondition(key, \"$select\", {\n                key: queryKey,\n                query: queryJSON\n            });\n            return this;\n        },\n\n        /**\n     * 添加查询： key's value 不匹配一个对象，这个对象通过不同的Bmob.Query返回。\n     * @param {String} key 需要匹配的key值\n     *                     excluded.\n     * @param {String} queryKey 返回通过不匹配的查询的对象的键 \n     * @param {Bmob.Query} query 需要运行的查询\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        doesNotMatchKeyInQuery: function (key, queryKey, query) {\n            var queryJSON = query.toJSON();\n            queryJSON.className = query.className;\n            this._addCondition(key, \"$dontSelect\", {\n                key: queryKey,\n                query: queryJSON\n            });\n            return this;\n        },\n\n        /**\n     * Add constraint that at least one of the passed in queries matches.\n     * @param {Array} queries\n     * @return {Bmob.Query} Returns the query, so you can chain this call.\n     */\n        _orQuery: function (queries) {\n            var queryJSON = _.map(queries,\n                function (q) {\n                    return q.toJSON().where;\n                });\n\n            this._where.$or = queryJSON;\n            return this;\n        },\n\n        /**\n     * Converts a string into a regex that matches it.\n     * Surrounding with \\Q .. \\E does this, we just need to escape \\E's in\n     * the text separately.\n     */\n        _quote: function (s) {\n            return \"\\\\Q\" + s.replace(\"\\\\E\", \"\\\\E\\\\\\\\E\\\\Q\") + \"\\\\E\";\n        },\n\n        /**\n     * 查找一个值中是否包含某个子串。在大量的数据中，这个操作可能很慢。\n     * @param {String} key 需要查找的值\n     * @param {String} substring 需要匹配子串\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        contains: function (key, value) {\n            this._addCondition(key, \"$regex\", this._quote(value));\n            return this;\n        },\n\n        /**\n     * 检查某个值是否以特殊的字符串开头。 这查询使用了backend index，因此在大数据中也很快。\n     * @param {String} key 需要查找的值\n     * @param {String} prefix 需要匹配子串\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        startsWith: function (key, value) {\n            this._addCondition(key, \"$regex\", \"^\" + this._quote(value));\n            return this;\n        },\n\n        /**\n     * 检查某个值是否以特殊的字符串结尾。在大量的数据中，这个操作可能很慢。\n     * @param {String} key 需要查找的值\n     * @param {String} suffix 需要匹配子串\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        endsWith: function (key, value) {\n            this._addCondition(key, \"$regex\", this._quote(value) + \"$\");\n            return this;\n        },\n\n        /**\n     * 根据key对结果进行升序。\n     *\n     * @param {String} key 排序的key\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        ascending: function (key) {\n\n            if (Bmob._isNullOrUndefined(this._order)) {\n                this._order = key;\n            } else {\n                this._order = this._order + \",\" + key;\n            }\n            return this;\n        },\n\n        cleanOrder: function (key) {\n            this._order = null;\n            return this;\n        },\n\n        /**\n     * 根据key对结果进行降序。\n     *\n     * @param {String} key 排序的key\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        descending: function (key) {\n            if (Bmob._isNullOrUndefined(this._order)) {\n                this._order = \"-\" + key;\n            } else {\n                this._order = this._order + \",-\" + key;\n            }\n\n            return this;\n        },\n\n        /**\n     * 查找一个geo point 附近的坐标。\n     * @param {String} key Bmob.GeoPoint的key\n     * @param {Bmob.GeoPoint} point 指向一个 Bmob.GeoPoint \n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        near: function (key, point) {\n            if (!(point instanceof Bmob.GeoPoint)) {\n                // Try to cast it to a GeoPoint, so that near(\"loc\", [20,30]) works.\n                point = new Bmob.GeoPoint(point);\n            }\n            this._addCondition(key, \"$nearSphere\", point);\n            return this;\n        },\n\n        /**\n     * 添加用于查找附近的对象，并基于弧度给出最大距离内的点。\n     * @param {String} key Bmob.GeoPoint的key\n     * @param {Bmob.GeoPoint} point 指向一个 Bmob.GeoPoint \n     * @param maxDistance 返回的最大距离，基于弧度.\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        withinRadians: function (key, point, distance) {\n            this.near(key, point);\n            this._addCondition(key, \"$maxDistance\", distance);\n            return this;\n        },\n\n        /**\n     * 添加用于查找附近的对象，并基于米给出最大距离内的点。\n     * @param {String} key Bmob.GeoPoint的key\n     * @param {Bmob.GeoPoint} point 指向一个 Bmob.GeoPoint \n     * @param maxDistance 返回的最大距离，基于弧度.\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        withinMiles: function (key, point, distance) {\n            return this.withinRadians(key, point, distance / 3958.8);\n        },\n\n        /**\n     * 添加用于查找附近的对象，并基于千米给出最大距离内的点。\n     * @param {String} key Bmob.GeoPoint的key\n     * @param {Bmob.GeoPoint} point 指向一个 Bmob.GeoPoint \n     * @param maxDistance 返回的最大距离，基于弧度.\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        withinKilometers: function (key, point, distance) {\n            return this.withinRadians(key, point, distance / 6371.0);\n        },\n\n        /**\n     * 在一个四边形范围内，查找某个点附近的对象\n     * @param {String} key The key to be constrained.\n     * @param {Bmob.GeoPoint} southwest 这个四边形的南西方向\n     * @param {Bmob.GeoPoint} northeast 这个四边形的东北方向 \n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        withinGeoBox: function (key, southwest, northeast) {\n            if (!(southwest instanceof Bmob.GeoPoint)) {\n                southwest = new Bmob.GeoPoint(southwest);\n            }\n            if (!(northeast instanceof Bmob.GeoPoint)) {\n                northeast = new Bmob.GeoPoint(northeast);\n            }\n            this._addCondition(key, '$within', {\n                '$box': [southwest, northeast]\n            });\n            return this;\n        },\n\n        /**\n     * 当获取的Bmob.Objects有指向其子对象的Pointer类型指针Key时，你可以加入inclue选项来获取指针指向的子对象\n     * @param {String} key 需要包含的key的值\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        include: function () {\n            var self = this;\n            Bmob._arrayEach(arguments,\n                function (key) {\n                    if (_.isArray(key)) {\n                        self._include = self._include.concat(key);\n                    } else {\n                        self._include.push(key);\n                    }\n                });\n            return this;\n        },\n\n        /**\n     * 匹配另一个查询的返回值，如果这个函数被调用多次，每次调用时所有的keys将会被包含。\n     * @param {Array} keys 需要包含的key的值\n     * @return {Bmob.Query} 返回查询对象，因此可以使用链式调用。\n     */\n        select: function () {\n            var self = this;\n            this._select = this._select || [];\n            Bmob._arrayEach(arguments,\n                function (key) {\n                    if (_.isArray(key)) {\n                        self._select = self._select.concat(key);\n                    } else {\n                        self._select.push(key);\n                    }\n                });\n            return this;\n        },\n\n        /**\n     * 对查询的每个结果调用回调函数。\n     * 如果callback返回promise，这个迭代器不会继续直到所有的promise调用完毕。\n     * 如果回调返回拒绝promise，迭代会停止。\n     * 所有对象将以不排序的形式处理。\n     * 查询将不会有任何的排序，同时limit 或skip 将无效。\n     * @param callback {Function} 每个结果调用的回调函数\n     * @param options {Object} 可选的 Backbone-like 带成功或失败的回调，回调将会执行当迭代结束的时候。\n     * @return {Bmob.Promise} 当迭代结束的时候A promise 将会执行一次。\n     */\n        each: function (callback, options) {\n            options = options || {};\n\n            if (this._order || this._skip || (this._limit >= 0)) {\n                var error = \"Cannot iterate on a query with sort, skip, or limit.\";\n                return Bmob.Promise.error(error)._thenRunCallbacks(options);\n            }\n\n            var promise = new Bmob.Promise();\n\n            var query = new Bmob.Query(this.objectClass);\n            // We can override the batch size from the options.\n            // This is undocumented, but useful for testing.\n            query._limit = options.batchSize || 100;\n            query._where = _.clone(this._where);\n            query._include = _.clone(this._include);\n\n            query.ascending('objectId');\n\n            var finished = false;\n            return Bmob.Promise._continueWhile(function () {\n                return !finished;\n\n            },\n                function () {\n                    return query.find().then(function (results) {\n                        var callbacksDone = Bmob.Promise.as();\n                        Bmob._.each(results,\n                            function (result) {\n                                callbacksDone = callbacksDone.then(function () {\n                                    return callback(result);\n                                });\n                            });\n\n                        return callbacksDone.then(function () {\n                            if (results.length >= query._limit) {\n                                query.greaterThan(\"objectId\", results[results.length - 1].id);\n                            } else {\n                                finished = true;\n                            }\n                        });\n                    });\n                })._thenRunCallbacks(options);\n        }\n    };\n\n    Bmob.FriendShipQuery = Bmob.Query._extend({\n        _objectClass: Bmob.User,\n        _newObject: function () {\n            return new Bmob.User();\n        },\n        _processResult: function (json) {\n            var user = json[this._friendshipTag];\n            if (user.__type === 'Pointer' && user.className === '_User') {\n                delete user.__type;\n                delete user.className;\n            }\n            return user;\n        },\n    });\n\n    /**\n   * History serves as a global router (per frame) to handle hashchange\n   * events or pushState, match the appropriate route, and trigger\n   * callbacks. You shouldn't ever have to create one of these yourself\n   * — you should use the reference to <code>Bmob.history</code>\n   * that will be created for you automatically if you make use of\n   * Routers with routes.\n   *\n   * <p>A fork of Backbone.History, provided for your convenience.  If you\n   * use this class, you must also include jQuery, or another library\n   * that provides a jQuery-compatible $ function.  For more information,\n   * see the <a href=\"http://documentcloud.github.com/backbone/#History\">\n   * Backbone documentation</a>.</p>\n   * <p><strong><em>Available in the client SDK only.</em></strong></p>\n   */\n    Bmob.History = function () {\n        this.handlers = [];\n        _.bindAll(this, 'checkUrl');\n    };\n\n    // Cached regex for cleaning leading hashes and slashes .\n    var routeStripper = /^[#\\/]/;\n\n    // Cached regex for detecting MSIE.\n    var isExplorer = /msie [\\w.]+/;\n\n    // Has the history handling already been started?\n    Bmob.History.started = false;\n\n    // Set up all inheritable **Bmob.History** properties and methods.\n    _.extend(Bmob.History.prototype, Bmob.Events,\n        /** @lends Bmob.History.prototype */\n        {\n\n            // The default interval to poll for hash changes, if necessary, is\n            // twenty times a second.\n            interval: 50,\n\n            // Gets the true hash value. Cannot use location.hash directly due to bug\n            // in Firefox where location.hash will always be decoded.\n            getHash: function (windowOverride) {\n                var loc = windowOverride ? windowOverride.location : window.location;\n                var match = loc.href.match(/#(.*)$/);\n                return match ? match[1] : '';\n            },\n\n            // Get the cross-browser normalized URL fragment, either from the URL,\n            // the hash, or the override.\n            getFragment: function (fragment, forcePushState) {\n                if (Bmob._isNullOrUndefined(fragment)) {\n                    if (this._hasPushState || forcePushState) {\n                        fragment = window.location.pathname;\n                        var search = window.location.search;\n                        if (search) {\n                            fragment += search;\n                        }\n                    } else {\n                        fragment = this.getHash();\n                    }\n                }\n                if (!fragment.indexOf(this.options.root)) {\n                    fragment = fragment.substr(this.options.root.length);\n                }\n                return fragment.replace(routeStripper, '');\n            },\n\n            /**\n         * Start the hash change handling, returning `true` if the current\n         * URL matches an existing route, and `false` otherwise.\n         */\n            start: function (options) {\n                if (Bmob.History.started) {\n                    throw new Error(\"Bmob.history has already been started\");\n                }\n                Bmob.History.started = true;\n\n                // Figure out the initial configuration. Do we need an iframe?\n                // Is pushState desired ... is it available?\n                this.options = _.extend({},\n                    {\n                        root: '/'\n                    },\n                    this.options, options);\n                this._wantsHashChange = this.options.hashChange !== false;\n                this._wantsPushState = !!this.options.pushState;\n                this._hasPushState = !!(this.options.pushState && window.history && window.history.pushState);\n                var fragment = this.getFragment();\n                var docMode = document.documentMode;\n                var oldIE = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));\n\n                if (oldIE) {\n                    this.iframe = Bmob.$('<iframe src=\"javascript:0\" tabindex=\"-1\" />').hide().appendTo('body')[0].contentWindow;\n                    this.navigate(fragment);\n                }\n\n                // Depending on whether we're using pushState or hashes, and whether\n                // 'onhashchange' is supported, determine how we check the URL state.\n                if (this._hasPushState) {\n                    Bmob.$(window).bind('popstate', this.checkUrl);\n                } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {\n                    Bmob.$(window).bind('hashchange', this.checkUrl);\n                } else if (this._wantsHashChange) {\n                    this._checkUrlInterval = window.setInterval(this.checkUrl, this.interval);\n                }\n\n                // Determine if we need to change the base url, for a pushState link\n                // opened by a non-pushState browser.\n                this.fragment = fragment;\n                var loc = window.location;\n                var atRoot = loc.pathname === this.options.root;\n\n                // If we've started off with a route from a `pushState`-enabled browser,\n                // but we're currently in a browser that doesn't support it...\n                if (this._wantsHashChange && this._wantsPushState && !this._hasPushState && !atRoot) {\n                    this.fragment = this.getFragment(null, true);\n                    window.location.replace(this.options.root + '#' + this.fragment);\n                    // Return immediately as browser will do redirect to new url\n                    return true;\n\n                    // Or if we've started out with a hash-based route, but we're currently\n                    // in a browser where it could be `pushState`-based instead...\n                } else if (this._wantsPushState && this._hasPushState && atRoot && loc.hash) {\n                    this.fragment = this.getHash().replace(routeStripper, '');\n                    window.history.replaceState({},\n                        document.title, loc.protocol + '//' + loc.host + this.options.root + this.fragment);\n                }\n\n                if (!this.options.silent) {\n                    return this.loadUrl();\n                }\n            },\n\n            // Disable Bmob.history, perhaps temporarily. Not useful in a real app,\n            // but possibly useful for unit testing Routers.\n            stop: function () {\n                Bmob.$(window).unbind('popstate', this.checkUrl).unbind('hashchange', this.checkUrl);\n                window.clearInterval(this._checkUrlInterval);\n                Bmob.History.started = false;\n            },\n\n            // Add a route to be tested when the fragment changes. Routes added later\n            // may override previous routes.\n            route: function (route, callback) {\n                this.handlers.unshift({\n                    route: route,\n                    callback: callback\n                });\n            },\n\n            // Checks the current URL to see if it has changed, and if it has,\n            // calls `loadUrl`, normalizing across the hidden iframe.\n            checkUrl: function (e) {\n                var current = this.getFragment();\n                if (current === this.fragment && this.iframe) {\n                    current = this.getFragment(this.getHash(this.iframe));\n                }\n                if (current === this.fragment) {\n                    return false;\n                }\n                if (this.iframe) {\n                    this.navigate(current);\n                }\n                if (!this.loadUrl()) {\n                    this.loadUrl(this.getHash());\n                }\n            },\n\n            // Attempt to load the current URL fragment. If a route succeeds with a\n            // match, returns `true`. If no defined routes matches the fragment,\n            // returns `false`.\n            loadUrl: function (fragmentOverride) {\n                var fragment = this.fragment = this.getFragment(fragmentOverride);\n                var matched = _.any(this.handlers,\n                    function (handler) {\n                        if (handler.route.test(fragment)) {\n                            handler.callback(fragment);\n                            return true;\n                        }\n                    });\n                return matched;\n            },\n\n            // Save a fragment into the hash history, or replace the URL state if the\n            // 'replace' option is passed. You are responsible for properly URL-encoding\n            // the fragment in advance.\n            //\n            // The options object can contain `trigger: true` if you wish to have the\n            // route callback be fired (not usually desirable), or `replace: true`, if\n            // you wish to modify the current URL without adding an entry to the\n            // history.\n            navigate: function (fragment, options) {\n                if (!Bmob.History.started) {\n                    return false;\n                }\n                if (!options || options === true) {\n                    options = {\n                        trigger: options\n                    };\n                }\n                var frag = (fragment || '').replace(routeStripper, '');\n                if (this.fragment === frag) {\n                    return;\n                }\n\n                // If pushState is available, we use it to set the fragment as a real URL.\n                if (this._hasPushState) {\n                    if (frag.indexOf(this.options.root) !== 0) {\n                        frag = this.options.root + frag;\n                    }\n                    this.fragment = frag;\n                    var replaceOrPush = options.replace ? 'replaceState' : 'pushState';\n                    window.history[replaceOrPush]({},\n                        document.title, frag);\n\n                    // If hash changes haven't been explicitly disabled, update the hash\n                    // fragment to store history.\n                } else if (this._wantsHashChange) {\n                    this.fragment = frag;\n                    this._updateHash(window.location, frag, options.replace);\n                    if (this.iframe && (frag !== this.getFragment(this.getHash(this.iframe)))) {\n                        // Opening and closing the iframe tricks IE7 and earlier\n                        // to push a history entry on hash-tag change.\n                        // When replace is true, we don't want this.\n                        if (!options.replace) {\n                            this.iframe.document.open().close();\n                        }\n                        this._updateHash(this.iframe.location, frag, options.replace);\n                    }\n\n                    // If you've told us that you explicitly don't want fallback hashchange-\n                    // based history, then `navigate` becomes a page refresh.\n                } else {\n                    window.location.assign(this.options.root + fragment);\n                }\n                if (options.trigger) {\n                    this.loadUrl(fragment);\n                }\n            },\n\n            // Update the hash location, either replacing the current entry, or adding\n            // a new one to the browser history.\n            _updateHash: function (location, fragment, replace) {\n                if (replace) {\n                    var s = location.toString().replace(/(javascript:|#).*$/, '');\n                    location.replace(s + '#' + fragment);\n                } else {\n                    location.hash = fragment;\n                }\n            }\n        });\n\n    /**\n   * Routers map faux-URLs to actions, and fire events when routes are\n   * matched. Creating a new one sets its `routes` hash, if not set statically.\n   *\n   * <p>A fork of Backbone.Router, provided for your convenience.\n   * For more information, see the\n   * <a href=\"http://documentcloud.github.com/backbone/#Router\">Backbone\n   * documentation</a>.</p>\n   * <p><strong><em>Available in the client SDK only.</em></strong></p>\n   */\n    Bmob.Router = function (options) {\n        options = options || {};\n        if (options.routes) {\n            this.routes = options.routes;\n        }\n        this._bindRoutes();\n        this.initialize.apply(this, arguments);\n    };\n\n    // Cached regular expressions for matching named param parts and splatted\n    // parts of route strings.\n    var namedParam = /:\\w+/g;\n    var splatParam = /\\*\\w+/g;\n    var escapeRegExp = /[\\-\\[\\]{}()+?.,\\\\\\^\\$\\|#\\s]/g;\n\n    // Set up all inheritable **Bmob.Router** properties and methods.\n    _.extend(Bmob.Router.prototype, Bmob.Events,\n        /** @lends Bmob.Router.prototype */\n        {\n\n            /**\n         * Initialize is an empty function by default. Override it with your own\n         * initialization logic.\n         */\n            initialize: function () { },\n\n            /**\n         * Manually bind a single named route to a callback. For example:\n         *\n         * <pre>this.route('search/:query/p:num', 'search', function(query, num) {\n         *       ...\n         *     });</pre>\n         */\n            route: function (route, name, callback) {\n                Bmob.history = Bmob.history || new Bmob.History();\n                if (!_.isRegExp(route)) {\n                    route = this._routeToRegExp(route);\n                }\n                if (!callback) {\n                    callback = this[name];\n                }\n                Bmob.history.route(route, _.bind(function (fragment) {\n                    var args = this._extractParameters(route, fragment);\n                    if (callback) {\n                        callback.apply(this, args);\n                    }\n                    this.trigger.apply(this, ['route:' + name].concat(args));\n                    Bmob.history.trigger('route', this, name, args);\n                },\n                    this));\n                return this;\n            },\n\n            /**\n         * Whenever you reach a point in your application that you'd\n         * like to save as a URL, call navigate in order to update the\n         * URL. If you wish to also call the route function, set the\n         * trigger option to true. To update the URL without creating\n         * an entry in the browser's history, set the replace option\n         * to true.\n         */\n            navigate: function (fragment, options) {\n                Bmob.history.navigate(fragment, options);\n            },\n\n            // Bind all defined routes to `Bmob.history`. We have to reverse the\n            // order of the routes here to support behavior where the most general\n            // routes can be defined at the bottom of the route map.\n            _bindRoutes: function () {\n                if (!this.routes) {\n                    return;\n                }\n                var routes = [];\n                for (var route in this.routes) {\n                    if (this.routes.hasOwnProperty(route)) {\n                        routes.unshift([route, this.routes[route]]);\n                    }\n                }\n                for (var i = 0,\n                    l = routes.length; i < l; i++) {\n                    this.route(routes[i][0], routes[i][1], this[routes[i][1]]);\n                }\n            },\n\n            // Convert a route string into a regular expression, suitable for matching\n            // against the current location hash.\n            _routeToRegExp: function (route) {\n                route = route.replace(escapeRegExp, '\\\\$&').replace(namedParam, '([^\\/]+)').replace(splatParam, '(.*?)');\n                return new RegExp('^' + route + '$');\n            },\n\n            // Given a route, and a URL fragment that it matches, return the array of\n            // extracted parameters.\n            _extractParameters: function (route, fragment) {\n                return route.exec(fragment).slice(1);\n            }\n        });\n\n    /**\n   * @function\n   * @param {Object} instanceProps Instance properties for the router.\n   * @param {Object} classProps Class properies for the router.\n   * @return {Class} A new subclass of <code>Bmob.Router</code>.\n   */\n    Bmob.Router.extend = Bmob._extend;\n\n    /**\n   * @namespace 处理图片的函数\n   */\n    Bmob.Image = Bmob.Image || {};\n\n    _.extend(Bmob.Image,\n        /** @lends Bmob.Image */\n        {\n            /**\n         * 调用生成缩略图的函数。\n         * @param {Object} 相应的参数\n         * @param {Object} Backbone-style options 对象。 options.success, 如果设置了，将会处理云端代码调用成功的情况。 options.error 如果设置了，将会处理云端代码调用失败的情况。 两个函数都是可选的。两个函数都只有一个参数。\n         * @return {Bmob.Promise} \n         */\n            thumbnail: function (data, options) {\n                var request = Bmob._request(\"images/thumbnail\", null, null, 'POST', Bmob._encode(data, null, true));\n\n                return request.then(function (resp) {\n                    return resp;\n                });\n\n            },\n\n            /**\n         * 调用生成水印的函数。\n         * @param {Object} 相应的参数\n         * @param {Object} Backbone-style options 对象。 options.success, 如果设置了，将会处理云端代码调用成功的情况。 options.error 如果设置了，将会处理云端代码调用失败的情况。 两个函数都是可选的。两个函数都只有一个参数。\n         * @return {Bmob.Promise} \n         */\n            watermark: function (data, options) {\n                var request = Bmob._request(\"images/watermark\", null, null, 'POST', Bmob._encode(data, null, true));\n\n                return request.then(function (resp) {\n                    return resp;\n                });\n\n            }\n        });\n\n    /**\n* @namespace 生成二维码\n*/\n    Bmob.generateCode = Bmob.generateCode || {};\n\n\n\n    Bmob.generateCode = function (data, options) {\n        var request = Bmob._request(\"wechatApp/qr/generatecode\", null, null, 'POST', Bmob._encode(data, null, true));\n        return request.then(function (resp) {\n            return Bmob._decode(null, resp);\n        })._thenRunCallbacks(options);\n\n    }\n\n\n\n    /**\n   * @namespace 处理短信的函数\n   */\n    Bmob.Sms = Bmob.Sms || {};\n\n    _.extend(Bmob.Sms,\n        /** @lends Bmob.Sms */\n        {\n\n            /**\n         * 请求发送短信内容\n         * @param {Object} 相应的参数\n         * @param {Object} Backbone-style options 对象。 options.success, 如果设置了，将会处理云端代码调用成功的情况。 options.error 如果设置了，将会处理云端代码调用失败的情况。 两个函数都是可选的。两个函数都只有一个参数。\n         * @return {Bmob.Promise} \n         */\n            requestSms: function (data, options) {\n                var request = Bmob._request(\"requestSms\", null, null, 'POST', Bmob._encode(data, null, true));\n                return request.then(function (resp) {\n                    return Bmob._decode(null, resp);\n                })._thenRunCallbacks(options);\n\n            },\n\n            /**\n         * 请求短信验证码\n         * @param {Object} 相应的参数\n         * @param {Object} Backbone-style options 对象。 options.success, 如果设置了，将会处理云端代码调用成功的情况。 options.error 如果设置了，将会处理云端代码调用失败的情况。 两个函数都是可选的。两个函数都只有一个参数。\n         * @return {Bmob.Promise}\n         */\n            requestSmsCode: function (data, options) {\n                var request = Bmob._request(\"requestSmsCode\", null, null, 'POST', Bmob._encode(data, null, true));\n                return request.then(function (resp) {\n                    return Bmob._decode(null, resp);\n                })._thenRunCallbacks(options);\n\n            },\n\n            /**\n         * 验证短信验证码\n         * @param {Object} 相应的参数\n         * @param {Object} Backbone-style options 对象。 options.success, 如果设置了，将会处理云端代码调用成功的情况。 options.error 如果设置了，将会处理云端代码调用失败的情况。 两个函数都是可选的。两个函数都只有一个参数。\n         * @return {Bmob.Promise}\n         */\n            verifySmsCode: function (mob, verifyCode, options) {\n                var data = {\n                    \"mobilePhoneNumber\": mob\n                };\n                var request = Bmob._request(\"verifySmsCode/\" + verifyCode, null, null, 'POST', Bmob._encode(data, null, true));\n                return request.then(function (resp) {\n                    return Bmob._decode(null, resp);\n                })._thenRunCallbacks(options);\n            },\n\n            /**\n         * 查询短信状态\n         * @param {Object} 相应的参数\n         * @param {Object} Backbone-style options 对象。 options.success, 如果设置了，将会处理云端代码调用成功的情况。 options.error 如果设置了，将会处理云端代码调用失败的情况。 两个函数都是可选的。两个函数都只有一个参数。\n         * @return {Bmob.Promise}\n         */\n            querySms: function (smsId, options) {\n                var request = Bmob._request(\"querySms/\" + smsId, null, null, 'GET', null);\n                return request.then(function (resp) {\n                    return Bmob._decode(null, resp);\n                })._thenRunCallbacks(options);\n            }\n        });\n\n\n    /**\n  * @namespace 支付功能\n  * <a href=\"http://docs.bmob.cn/restful/developdoc/index.html?menukey=develop_doc&key=develop_restful#index_支付服务\">cloud functions</a>.\n  */\n    Bmob.Pay = Bmob.Pay || {};\n\n    _.extend(Bmob.Pay, /** @lends Bmob.Cloud */\n        {\n\n            /**\n             * 网页端调起小程序支付接口\n             * @param {float} 价格\n             * @param {String} 商品名称    \n             * @param {String} 描述\n             * @param {String} OPEN ID          \n             * @param {Object} options  -style options 对象。\n             * options.success, 如果设置了，将会处理云端代码调用成功的情况。  options.error 如果设置了，将会处理云端代码调用失败的情况。  两个函数都是可选的。两个函数都只有一个参数。\n             * @return {Bmob.Promise} A promise 将会处理云端代码调用的情况。\n             */\n            wechatPay: function (price, product_name, body, openid, options) {\n                var data = { \"order_price\": price, \"product_name\": product_name, \"body\": body, \"open_id\": openid, \"pay_type\": 4 }\n                var request = Bmob._request(\"pay\", null, null, 'POST',\n                    Bmob._encode(data, null, true));\n\n                return request.then(function (resp) {\n                    return Bmob._decode(null, resp);\n                })._thenRunCallbacks(options);\n            },\n\n            /**\n             * 查询订单\n             * @param {String} 订单id        \n             * @param {Object} options  Backbone-style options 对象。\n             * options.success, 如果设置了，将会处理云端代码调用成功的情况。  options.error 如果设置了，将会处理云端代码调用失败的情况。  两个函数都是可选的。两个函数都只有一个参数。\n             * @return {Bmob.Promise} A promise 将会处理云端代码调用的情况。\n             */\n            queryOrder: function (orderId, options) {\n\n                var request = Bmob._request(\"pay/\" + orderId, null, null, 'GET',\n                    null);\n                return request.then(function (resp) {\n                    return Bmob._decode(null, resp);\n                })._thenRunCallbacks(options);\n            }\n        });\n\n\n\n    /**\n   * @namespace 运行云端代码\n   * <a href=\"cloudcode/developdoc/index.html?menukey=develop_doc&key=develop_cloudcode\">cloud functions</a>.\n   */\n    Bmob.Cloud = Bmob.Cloud || {};\n\n    _.extend(Bmob.Cloud,\n        /** @lends Bmob.Cloud */\n        {\n            /**\n         * 运行云端代码\n         * @param {String} 云端代码的函数名\n         * @param {Object} 传人云端代码的参数\n         * @param {Object} options  Backbone-style options 对象。\n         * options.success, 如果设置了，将会处理云端代码调用成功的情况。  options.error 如果设置了，将会处理云端代码调用失败的情况。  两个函数都是可选的。两个函数都只有一个参数。\n         * @return {Bmob.Promise} A promise 将会处理云端代码调用的情况。\n         */\n            run: function (name, data, options) {\n                var request = Bmob._request(\"functions\", name, null, 'POST', Bmob._encode(data, null, true));\n\n                return request.then(function (resp) {\n                    return Bmob._decode(null, resp).result;\n                })._thenRunCallbacks(options);\n            }\n        });\n\n    Bmob.Installation = Bmob.Object.extend(\"_Installation\");\n\n    /**\n   * 包含push的函数\n   * @name Bmob.Push\n   * @namespace 推送消息\n   */\n    Bmob.Push = Bmob.Push || {};\n\n    /**\n   * 推送消息\n   * @param {Object} data -  具体的参数请查看<a href=\"http://docs.bmob.cn/restful/developdoc/index.html?menukey=develop_doc&key=develop_restful\">推送文档</a>.\n   * @param {Object} options options 对象。 options.success, 如果设置了，将会处理云端代码调用成功的情况。 options.error 如果设置了，将会处理云端代码调用失败的情况。 两个函数都是可选的。两个函数都只有一个参数。\n   */\n    Bmob.Push.send = function (data, options) {\n        if (data.where) {\n            data.where = data.where.toJSON().where;\n        }\n\n        if (data.push_time) {\n            data.push_time = data.push_time.toJSON();\n        }\n\n        if (data.expiration_time) {\n            data.expiration_time = data.expiration_time.toJSON();\n        }\n\n        if (data.expiration_time && data.expiration_time_interval) {\n            throw \"Both expiration_time and expiration_time_interval can't be set\";\n        }\n\n        var request = Bmob._request('push', null, null, 'POST', data);\n        return request._thenRunCallbacks(options);\n    };\n}.call(this));",
			"file": "/F/wechat/carpeople2/carpeople/weapp/utils/bmob.js",
			"file_size": 270955,
			"file_write_time": 131384641316136091,
			"settings":
			{
				"buffer_size": 253534,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 242.0,
		"last_filter": "insta",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"in",
				"Install Package Control"
			]
		],
		"width": 432.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/F/wechat/carpeople2/carpeople",
		"/F/wechat/carpeople2/carpeople/weapp",
		"/F/wechat/carpeople2/carpeople/weapp/example",
		"/F/wechat/carpeople2/carpeople/weapp/example/input",
		"/F/wechat/carpeople2/carpeople/weapp/page",
		"/F/wechat/carpeople2/carpeople/weapp/page/login",
		"/F/wechat/carpeople2/carpeople/weapp/page/publish",
		"/F/wechat/carpeople2/carpeople/weapp/page/search",
		"/F/wechat/carpeople2/carpeople/weapp/page/searchview",
		"/F/wechat/carpeople2/carpeople/web",
		"/F/wechat/carpeople2/carpeople/web/src",
		"/F/wechat/carpeople2/carpeople/web/src/components",
		"/F/wechat/carpeople2/carpeople/web/src/mixin",
		"/F/wechat/carpeople2/carpeople/web/src/router",
		"/F/wechat/carpeople2/carpeople/web/static"
	],
	"file_history":
	[
		"/F/wechat/carpeople2/carpeople/web/src/components/SearchView.vue",
		"/F/wechat/carpeople2/carpeople/web/cpweb.sublime-project",
		"/F/wechat/carpeople2/carpeople/web/index.html",
		"/F/wechat/carpeople2/carpeople/weapp/page/searchview/searchview.wxml",
		"/F/wechat/carpeople2/carpeople/web/src/App.vue",
		"/F/wechat/carpeople2/carpeople/web/src/router/index.js",
		"/F/wechat/carpeople2/carpeople/web/src/components/Publish.vue",
		"/F/wechat/carpeople2/carpeople/web/src/components/Search.vue",
		"/F/wechat/carpeople2/carpeople/web/node_modules/._moment@2.18.1@moment/moment.js",
		"/C/Users/acer/.m2/setting.xml.txt",
		"/C/Users/acer/.m2/setting.xml",
		"/F/wechat/carpeople2/carpeople/web/package.json",
		"/C/apache-maven-3.5.0/bin/m2.conf",
		"/C/apache-maven-3.5.0/conf/settings.xml",
		"/C/Windows/System32/cmd.exe",
		"/F/ken/framework/Support/Psr7Psr15.php",
		"/C/Users/acer/AppData/Local/Temp/~flashfxp/AEBF1CF9_edit.tmp/index.inc.php",
		"/F/wechat/carpeople/web/node_modules/.0.1.43@source-map/build/mini-require.js",
		"/C/Users/acer/AppData/Local/Temp/~flashfxp/E1B45B9A_edit.tmp/site.php",
		"/F/wechat/carpeople/web/src/components/PeopleCar.vue",
		"/F/wechat/carpeople/web/src/components/Footer.vue",
		"/F/wechat/carpeople/web/index.html",
		"/F/wechat/carpeople/web/src/App.vue",
		"/F/wechat/carpeople/web/src/main.js",
		"/F/wechat/carpeople/web/src/router/index.js",
		"/F/wechat/carpeople/web/src/components/Hello.vue",
		"/F/wechat/carpeople/web/src/components/Publish.vue",
		"/F/wechat/carpeople/web/src/components/CarPeople.vue",
		"/F/wechat/carpeople/web/src/mixin/index.js",
		"/F/wechat/carpeople/web/src/components/Login.vue",
		"/C/Users/acer/.ssh/id_rsa.pub"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"div",
			"\">\n",
			"_linkWith",
			"extension_dir",
			"model"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/F/wechat/carpeople2/carpeople/weapp/page/search/search.wxml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1211,
						"regions":
						{
						},
						"selection":
						[
							[
								1166,
								1159
							]
						],
						"settings":
						{
							"syntax": "Packages/wxapp/wxml/WXML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/acer/Desktop/新建文本文档.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7395,
						"regions":
						{
						},
						"selection":
						[
							[
								3951,
								3951
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 585.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7458,
						"regions":
						{
						},
						"selection":
						[
							[
								494,
								494
							]
						],
						"settings":
						{
							"auto_name": "<template>",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 765.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/F/wechat/carpeople2/carpeople/weapp/example/input/input.wxml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7608,
						"regions":
						{
						},
						"selection":
						[
							[
								6015,
								6015
							]
						],
						"settings":
						{
							"syntax": "Packages/wxapp/wxml/WXML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1980.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/F/wechat/carpeople2/carpeople/weapp/page/login/login.wxml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1033,
						"regions":
						{
						},
						"selection":
						[
							[
								1008,
								1008
							]
						],
						"settings":
						{
							"syntax": "Packages/wxapp/wxml/WXML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/F/wechat/carpeople2/carpeople/weapp/utils/bmob.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 253534,
						"regions":
						{
						},
						"selection":
						[
							[
								190420,
								190420
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 79952.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "cpweb.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"bmob",
				"weapp\\utils\\bmob.js"
			],
			[
				"moment",
				"web\\node_modules\\._moment@2.18.1@moment\\moment.js"
			],
			[
				"qq",
				"src\\main\\java\\cn\\i0358\\model\\QQData.java"
			],
			[
				"pub",
				"src\\components\\Publish.vue"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 391.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
